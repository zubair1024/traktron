{"version":3,"sources":["webpack:///googlemaps.chunk.js","webpack:///external \"google.maps\"","webpack:///./js/maps/viewers/googlemaps/viewer.js","webpack:///./js/maps/viewers/googlemaps/clustering-layer.js","webpack:///./js/maps/viewers/googlemaps/layer.js","webpack:///./js/maps/viewers/googlemaps/map-object.js","webpack:///./js/maps/viewers/googlemaps/routing-engine.js","webpack:///./js/lib/googlemaps/markerclustererplus.min.js","webpack:///./js/lib/googlemaps/markerclustererplus.min.js?2064","webpack:///external \"MarkerClusterer\""],"names":["webpackJsonprequire","35","module","exports","google","maps","58","__webpack_require__","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","Viewer","undefined","_googlemaps","_googlemaps2","_project","_viewer","_layer","_clusteringLayer","_mapObject","_routingEngine","defaultBoundingBox","project","bbox","GoogleMapsViewer","stampit","init","_ref","instance","container","map","eventTypes","click","dragstart","drag","dragend","mousedown","mouseup","mouseenter","mouseleave","mousemove","mapviewchange","mapviewchangeend","overlay","canvasProjection","_","assign","getNativeObject","addEventListener","type","listener","eventType","isString","Error","mapsEventListener","event","addListener","removeEventListener","removeListener","onceEventListener","addListenerOnce","addOverlay","setMap","addObjects","mapObjects","forEach","mapObject","removeObjects","nativeObject","editModeClickListener","get","clearInstanceListeners","getLayerFactory","Layer","getClusteringLayerFactory","ClusteringLayer","getMapObjectFactory","MapObject","getRoutingEngineFactory","RoutingEngine","pixelToGeo","pixel","fromContainerPixelToLatLng","Point","x","y","geoToPixel","geo","fromLatLngToContainerPixel","LatLng","lat","lng","getBoundingBox","bounds","getBounds","ne","getNorthEast","sw","getSouthWest","left","bottom","right","top","getNativeBounds","constant","setBoundingBox","LatLngBounds","fitBounds","getCenter","center","setCenter","getZoom","zoomToLevel","zoom","setZoom","refresh","trigger","resize","shake","resolveProjection","defer","promise","Map","RIGHT_CENTER","ControlPosition","_google$maps$MapTypeI","MapTypeId","ROADMAP","SATELLITE","setOptions","mapTypeId","App","config","defaultMapTypeSatelliteEnabled","streetViewControlOptions","position","zoomControlOptions","createDefaultClickListener","createDefaultMapViewChangeEndListener","createDefaultMouseMoveListener","OverlayView","$","Deferred","onAdd","getProjection","resolve","onRemove","noop","draw","compose","97","_markerClusterer","_markerClusterer2","_styler","styler","Styler","getInstance","GoogleMapsClusteringLayer","viewer","markerClusterer","data","mapObjectList","defaultClusteringOptions","gridSize","maxZoom","Infinity","zoomOnClick","averageCenter","minimumClusterSize","ignoreHidden","imagePath","getClusterIconsDir","clusteringDefer","getData","key","setData","isPlainObject","isVisible","Boolean","setVisible","visible","activeMap_","getObjects","compact","add","markers","id","addMarkers","remove","removeMarkers","clear","clearMarkers","getMarkers","length","marker","extend","getPosition","isClusteringSupported","performClustering","clusteringOptions","clusteringEnabled","isClusteringEnabled","mcOptions","merge","isFinite","resolveClustering","clustered","minWeight","setClusteringEnabled","98","GoogleMapsLayer","setValues","set","getMap","forOwn","isArray","Marker","_mapObject$getBounds","other","union","99","_slicedToArray","sliceIterator","arr","i","_arr","_n","_d","_e","_s","_i","Symbol","iterator","next","done","push","err","Array","TypeError","_extends","target","arguments","source","prototype","hasOwnProperty","call","GoogleMapsMapObject","roamObject","objectModel","visibilitychange","mapchange","effective","getVisible","isWithinViewBounds","nativeBounds","withinViewBounds","contains","isFunction","intersects","some","getPath","getArray","latLng","createDefaultObjectModel","options","factoryMethod","getFactoryMethod","shapeType","setPosition","coordinates","oldPosition","newPosition","equals","getIcon","setIcon","icon","model","url","match","btoa","updateIcon","getRoamIcon","kendo","support","browser","msie","bounce","revertIcon","originalIcon","setOpacity","opacity","bounceDuration","setAnimation","Animation","BOUNCE","setTimeout","Circle","oldCenter","newCenter","setRadius","radius","getRadius","path","getCenterBounds","_instance$getBounds","deltaX","deltaY","Rectangle","setBounds","oldBounds","newBounds","setCoordinates","oldPath","coordinatesChanged","oldCoordinates","coordinate","setPath","toPoints","createDefaultRoamData","createDefaultMouseEnterListener","createDefaultMouseLeaveListener","visibilityChangedListener","createDefaultVisibilityChangedListener","createMarker","label","editable","draggable","_coordinates","editManager","getEditManager","setDraggable","_ref2","setEditableObjectCoordinates","_ref3","createPolyline","styleName","mapObjectFactory","polyline","Polyline","toEditablePolyShape","style","createNormalizedShapeStyle","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","icons","createPolygon","polygon","Polygon","paths","polyShape","_ref4","coordinates_","getEditableObjectCoordinates","editableObject","getEditableObject","_editableObject","_objectModel","create","setEditableObject","pointCount","floor","editingEventListener","toCoordinates","setEditable","createRectangle","points","_points","point1","point2","rectangle","distance","getEditableObjectBufferDistance","heading","geometry","spherical","computeOffset","bounds_","createCircle","circle","setEditableObjectBufferDistance","normalizeShapeStyle","defaultStyle","normalizedStyle","arrows","defaultIconSequence","SymbolPath","FORWARD_CLOSED_ARROW","scale","repeat","width","frequency","arrowStyle","100","GoogleMapsRoutingEngine","routingManager","placesService","routingService","searchPlaces","query","_viewer$getBoundingBo","textSearch","results","status","places","PlacesServiceStatus","OK","item","name","formatted_address","location","reject","message","calculateRoute","waypoints","getValidWaypoints","start","shift","end","pop","_routingManager$getRo","getRouteFeatures","tollroad","motorway","boatFerry","request","avoidTolls","avoidHighways","avoidFerries","travelMode","TravelMode","DRIVING","origin","destination","waypoint","stopover","route","response","DirectionsStatus","routes","routingResult","legs","summary","maneuvers","leg","duration","firstPointIndex","traveltime","steps","step","instructions","maneuver","instruction","baseCssAction","action","parseFloat","toFixed","transform","result","PlacesService","DirectionsService","230","242","256","MarkerClusterer"],"mappings":"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","file":"googlemaps.chunk.js","sourcesContent":["webpackJsonprequire([2],{\n\n/***/ 35:\n/***/ function(module, exports) {\n\n\tmodule.exports = google.maps;\n\n/***/ },\n\n/***/ 58:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Viewer = exports.default = undefined;\n\t\n\tvar _googlemaps = __webpack_require__(35);\n\t\n\tvar _googlemaps2 = _interopRequireDefault(_googlemaps);\n\t\n\tvar _project = __webpack_require__(27);\n\t\n\tvar _viewer = __webpack_require__(62);\n\t\n\tvar _layer = __webpack_require__(98);\n\t\n\tvar _clusteringLayer = __webpack_require__(97);\n\t\n\tvar _mapObject = __webpack_require__(99);\n\t\n\tvar _routingEngine = __webpack_require__(100);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar google = { maps: _googlemaps2.default }; /**\r\n\t                                              * Created by Glenn on 2015-06-19.\r\n\t                                              */\n\t\n\tvar defaultBoundingBox = _project.project.bbox;\n\t\n\t/**\r\n\t *\r\n\t * @extends {Viewer}\r\n\t */\n\tvar GoogleMapsViewer = stampit().init(function (_ref) {\n\t  var instance = _ref.instance;\n\t  var container = instance.container;\n\t\n\t  /* region private properties */\n\t\n\t  /*\r\n\t   *\r\n\t   */\n\t\n\t  var map = void 0;\n\t\n\t  /*\r\n\t   *\r\n\t   */\n\t  var eventTypes = {\n\t    click: 'click',\n\t    dragstart: 'dragstart',\n\t    drag: 'drag',\n\t    dragend: 'dragend',\n\t    mousedown: 'click',\n\t    mouseup: 'click',\n\t    mouseenter: 'mouseover',\n\t    mouseleave: 'mouseout',\n\t    mousemove: 'mousemove',\n\t    mapviewchange: 'bounds_changed',\n\t    mapviewchangeend: 'idle'\n\t  };\n\t\n\t  /*\r\n\t   *\r\n\t   */\n\t  var overlay = void 0;\n\t  var canvasProjection = void 0;\n\t\n\t  /* endregion private properties */\n\t\n\t  /* region privileged methods */\n\t\n\t  _.assign(instance, {\n\t\n\t    /**\r\n\t     * To be used necessarily with caution:\r\n\t     * Force this object to give up its secret (`map` object),\r\n\t     * since it is used in `.setMap()` method in Google Maps.\r\n\t     * @returns {*}\r\n\t     */\n\t\n\t    getNativeObject: function getNativeObject() {\n\t      return map;\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @param type\r\n\t     * @param listener\r\n\t     */\n\t    addEventListener: function addEventListener(type, listener) {\n\t      var eventType = eventTypes[type];\n\t\n\t      if (!_.isString(eventType)) {\n\t        throw new Error('Invalid event type: ' + type + '.');\n\t      }\n\t\n\t      listener.mapsEventListener = google.maps.event.addListener(map, eventType, listener);\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @param type\r\n\t     * @param listener\r\n\t     */\n\t    removeEventListener: function removeEventListener(type, listener) {\n\t      var eventType = eventTypes[type];\n\t\n\t      if (!_.isString(eventType)) {\n\t        throw new Error('Invalid event type: ' + type + '.');\n\t      }\n\t\n\t      google.maps.event.removeListener(listener.mapsEventListener);\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @param type\r\n\t     * @param listener\r\n\t     */\n\t    onceEventListener: function onceEventListener(type, listener) {\n\t      var eventType = eventTypes[type];\n\t\n\t      if (!_.isString(eventType)) {\n\t        throw new Error('Invalid event type: ' + type + '.');\n\t      }\n\t\n\t      listener.mapsEventListener = google.maps.event.addListenerOnce(map, eventType, listener);\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @param overlay\r\n\t     */\n\t    addOverlay: function addOverlay(overlay) {\n\t      overlay.getNativeObject().setMap(map);\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @param mapObjects\r\n\t     */\n\t    addObjects: function addObjects(mapObjects) {\n\t\n\t      _.forEach(mapObjects, function (mapObject) {\n\t        return mapObject.getNativeObject().setMap(map);\n\t      });\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @param mapObjects\r\n\t     */\n\t    removeObjects: function removeObjects(mapObjects) {\n\t\n\t      _.forEach(mapObjects, function (mapObject) {\n\t        var nativeObject = mapObject.getNativeObject();\n\t\n\t        /*\r\n\t         * Clean up listeners; prevent memory leak.\r\n\t         */\n\t        var editModeClickListener = nativeObject.get('editModeClickListener');\n\t\n\t        if (editModeClickListener) {\n\t          instance.removeEventListener('click', editModeClickListener);\n\t        }\n\t\n\t        google.maps.event.clearInstanceListeners(nativeObject);\n\t        nativeObject.setMap(undefined);\n\t      });\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @returns {*}\r\n\t     */\n\t    getLayerFactory: function getLayerFactory() {\n\t      return _layer.Layer;\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @returns {*}\r\n\t     */\n\t    getClusteringLayerFactory: function getClusteringLayerFactory() {\n\t      return _clusteringLayer.ClusteringLayer;\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @returns {*}\r\n\t     */\n\t    getMapObjectFactory: function getMapObjectFactory() {\n\t      return _mapObject.MapObject;\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @returns {*}\r\n\t     */\n\t    getRoutingEngineFactory: function getRoutingEngineFactory() {\n\t      return _routingEngine.RoutingEngine;\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @param pixel\r\n\t     * @returns {*}\r\n\t     */\n\t    pixelToGeo: function pixelToGeo(pixel) {\n\t      return canvasProjection.fromContainerPixelToLatLng(new google.maps.Point(pixel.x, pixel.y));\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @param geo\r\n\t     */\n\t    geoToPixel: function geoToPixel(geo) {\n\t      return canvasProjection.fromLatLngToContainerPixel(new google.maps.LatLng(geo.lat, geo.lng));\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @returns {Object} bbox\r\n\t     */\n\t    getBoundingBox: function getBoundingBox() {\n\t      var bounds = map.getBounds();\n\t      var ne = bounds.getNorthEast();\n\t      var sw = bounds.getSouthWest();\n\t\n\t      return {\n\t        left: ne.lng(),\n\t        bottom: sw.lat(),\n\t        right: sw.lng(),\n\t        top: ne.lat(),\n\t        getNativeBounds: _.constant(bounds)\n\t      };\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @param {Object} bbox\r\n\t     */\n\t    setBoundingBox: function setBoundingBox(bbox) {\n\t\n\t      if (bbox) {\n\t        var bottom = bbox.bottom;\n\t        var right = bbox.right;\n\t        var top = bbox.top;\n\t        var left = bbox.left;\n\t\n\t        var bounds = new google.maps.LatLngBounds(new google.maps.LatLng(bottom, right), new google.maps.LatLng(top, left));\n\t\n\t        map.fitBounds(bounds);\n\t      }\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @returns {{lat: *, lng: *}}\r\n\t     */\n\t    getCenter: function getCenter() {\n\t      var center = map.getCenter();\n\t\n\t      return {\n\t        lat: center.lat(),\n\t        lng: center.lng()\n\t      };\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @param center\r\n\t     */\n\t    setCenter: function setCenter(center) {\n\t      map.setCenter(center);\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @returns {*}\r\n\t     */\n\t    getZoom: function getZoom() {\n\t      return map.getZoom();\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @param zoom\r\n\t     */\n\t    zoomToLevel: function zoomToLevel(zoom) {\n\t\n\t      if (zoom >= 0) {\n\t        map.setZoom(zoom);\n\t      }\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     */\n\t    refresh: function refresh() {\n\t      google.maps.event.trigger(map, 'idle');\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     */\n\t    resize: function resize() {\n\t      google.maps.event.trigger(map, 'resize');\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     */\n\t    shake: function shake() {\n\t      instance.refresh();\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @returns {*}\r\n\t     */\n\t    resolveProjection: function resolveProjection() {\n\t      return defer.promise();\n\t    }\n\t  });\n\t\n\t  /* endregion privileged methods */\n\t\n\t  /* region init code */\n\t\n\t  /* region Google Maps initialization */\n\t\n\t  // Initialize the platform object.\n\t  map = new google.maps.Map(container[0]);\n\t\n\t  /**\r\n\t   * Reposition default native map controls so that they don't\r\n\t   * collide with the DRS extension positioning: since 3.22.\r\n\t   * @see https://developers.google.com/maps/articles/v322-controls-diff\r\n\t   */\n\t  var RIGHT_CENTER = google.maps.ControlPosition.RIGHT_CENTER;\n\t  var _google$maps$MapTypeI = google.maps.MapTypeId;\n\t  var ROADMAP = _google$maps$MapTypeI.ROADMAP;\n\t  var SATELLITE = _google$maps$MapTypeI.SATELLITE;\n\t\n\t  map.setOptions({\n\t    mapTypeId: App.config.map.defaultMapTypeSatelliteEnabled ? SATELLITE : ROADMAP,\n\t    streetViewControlOptions: {\n\t      position: RIGHT_CENTER\n\t    },\n\t    zoomControlOptions: {\n\t      position: RIGHT_CENTER\n\t    }\n\t  });\n\t\n\t  /*\r\n\t   * Setup default event listeners:\r\n\t   * - add event listeners related to map info box positioning,\r\n\t   * - add event listeners to map \"extensions\".\r\n\t   */\n\t  instance.addEventListener('click', instance.createDefaultClickListener());\n\t  instance.addEventListener('mapviewchangeend', instance.createDefaultMapViewChangeEndListener());\n\t  instance.addEventListener('mousemove', instance.createDefaultMouseMoveListener());\n\t\n\t  /**\r\n\t   * Get the proper projection of the map viewer. Uuuuugeleeeeey!\r\n\t   * @see http://qfox.nl/notes/116\r\n\t   * @type {google.maps.OverlayView}\r\n\t   */\n\t  overlay = new google.maps.OverlayView();\n\t  var defer = $.Deferred();\n\t  _.assign(overlay, {\n\t    onAdd: function onAdd() {\n\t\n\t      /**\r\n\t       * The projection is not initialized until onAdd is\r\n\t       * called by the API.\r\n\t       * @see https://developers.google.com/maps/documentation/javascript/3.exp/reference#OverlayView\r\n\t       */\n\t      canvasProjection = overlay.getProjection();\n\t      defer.resolve();\n\t    },\n\t\n\t\n\t    onRemove: _.noop,\n\t    draw: _.noop\n\t  }).setMap(map);\n\t\n\t  /* endregion Google Maps initialization */\n\t\n\t  instance.setBoundingBox(defaultBoundingBox);\n\t\n\t  /* endregion init code */\n\t});\n\t\n\tvar Viewer = stampit.compose(_viewer.Viewer, GoogleMapsViewer);\n\t\n\texports.default = Viewer;\n\texports.Viewer = Viewer;\n\n/***/ },\n\n/***/ 97:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.ClusteringLayer = exports.default = undefined;\n\t\n\tvar _googlemaps = __webpack_require__(35);\n\t\n\tvar _googlemaps2 = _interopRequireDefault(_googlemaps);\n\t\n\tvar _markerClusterer = __webpack_require__(256);\n\t\n\tvar _markerClusterer2 = _interopRequireDefault(_markerClusterer);\n\t\n\tvar _layer = __webpack_require__(37);\n\t\n\tvar _styler = __webpack_require__(15);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/**\r\n\t * Created by Glenn on 2015-07-30.\r\n\t */\n\t\n\tvar google = { maps: _googlemaps2.default };\n\t\n\tvar styler = _styler.Styler.getInstance();\n\t\n\t/**\r\n\t *\r\n\t * @extends {Layer}\r\n\t */\n\tvar GoogleMapsClusteringLayer = stampit().init(function (_ref) {\n\t  var instance = _ref.instance;\n\t  var viewer = instance.viewer;\n\t\n\t  /* region private properties */\n\t\n\t  /*\r\n\t   *\r\n\t   */\n\t\n\t  var markerClusterer = void 0;\n\t\n\t  /*\r\n\t   *\r\n\t   */\n\t  var data = {};\n\t\n\t  /*\r\n\t   *\r\n\t   */\n\t  var mapObjectList = {};\n\t\n\t  /*\r\n\t   *\r\n\t   */\n\t  var defaultClusteringOptions = {\n\t    gridSize: 60,\n\t    maxZoom: Infinity,\n\t    zoomOnClick: true,\n\t    averageCenter: false,\n\t    minimumClusterSize: 3,\n\t    ignoreHidden: true,\n\t    imagePath: styler.getClusterIconsDir() + 'm'\n\t  };\n\t\n\t  /*\r\n\t   *\r\n\t   */\n\t  var clusteringDefer = $.Deferred();\n\t\n\t  /* endregion private properties */\n\t\n\t  /* region privileged methods */\n\t\n\t  _.assign(instance, {\n\t\n\t    /**\r\n\t     *\r\n\t     * @returns {*}\r\n\t     */\n\t\n\t    getNativeObject: function getNativeObject() {\n\t      return markerClusterer;\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @param key\r\n\t     * @returns {*}\r\n\t     */\n\t    getData: function getData(key) {\n\t      return data[key];\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @param key\r\n\t     * @param value\r\n\t     */\n\t    setData: function setData(key, value) {\n\t\n\t      if (_.isPlainObject(key)) {\n\t        _.assign(data, key);\n\t      } else {\n\t        data[key] = value;\n\t      }\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @returns {boolean}\r\n\t     */\n\t    isVisible: function isVisible() {\n\t      return Boolean(instance.getData('visible'));\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @param visible\r\n\t     */\n\t    setVisible: function setVisible(visible) {\n\t      instance.setData('visible', visible);\n\t\n\t      var map = visible ? viewer.getNativeObject() : undefined;\n\t\n\t      /*\r\n\t       * `markerClusterer.setMap(null)` unclusters the clusters\r\n\t       * instead of setting the OverlayView's map to `null`.\r\n\t       * And, with that, comes this below awkward line.\r\n\t       */\n\t      markerClusterer.activeMap_ = map;\n\t      markerClusterer.setMap(map);\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @returns {*}\r\n\t     */\n\t    getObjects: function getObjects() {\n\t      return _(mapObjectList).map().compact().value();\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @param mapObjects\r\n\t     */\n\t    add: function add(mapObjects) {\n\t\n\t      var markers = _.map(mapObjects, function (mapObject) {\n\t        mapObjectList[mapObject.id] = mapObject;\n\t\n\t        return mapObject.getNativeObject();\n\t      });\n\t\n\t      markerClusterer.addMarkers(markers);\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @param mapObjects\r\n\t     */\n\t    remove: function remove(mapObjects) {\n\t\n\t      var markers = _.map(mapObjects, function (mapObject) {\n\t        delete mapObjectList[mapObject.id];\n\t\n\t        return mapObject.getNativeObject();\n\t      });\n\t\n\t      markerClusterer.removeMarkers(markers);\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     */\n\t    clear: function clear() {\n\t      mapObjectList = {};\n\t\n\t      markerClusterer.clearMarkers();\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @returns {{top: (*|Number), right: (*|Number), bottom: (*|Number), left: (*|Number)}}\r\n\t     */\n\t    getBounds: function getBounds() {\n\t      var markers = markerClusterer.getMarkers();\n\t      var bbox = void 0;\n\t\n\t      if (markers.length > 0) {\n\t        (function () {\n\t          var bounds = new google.maps.LatLngBounds();\n\t\n\t          _.forEach(markers, function (marker) {\n\t            return bounds.extend(marker.getPosition());\n\t          });\n\t\n\t          var ne = bounds.getNorthEast();\n\t          var sw = bounds.getSouthWest();\n\t\n\t          bbox = {\n\t            left: ne.lng(),\n\t            bottom: sw.lat(),\n\t            right: sw.lng(),\n\t            top: ne.lat()\n\t          };\n\t        })();\n\t      }\n\t\n\t      return bbox;\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @returns {boolean}\r\n\t     */\n\t    isClusteringSupported: function isClusteringSupported() {\n\t      return true;\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @param [clusteringOptions]\r\n\t     */\n\t    performClustering: function performClustering(clusteringOptions) {\n\t      clusteringDefer = $.Deferred();\n\t\n\t      var markers = [];\n\t\n\t      if (markerClusterer) {\n\t        markers = markerClusterer.getMarkers();\n\t        markerClusterer.clearMarkers();\n\t      }\n\t\n\t      var clusteringEnabled = instance.isClusteringEnabled();\n\t      var mcOptions = _.merge({}, defaultClusteringOptions, { minimumClusterSize: clusteringEnabled ? undefined : Infinity }, clusteringOptions);\n\t\n\t      instance.setData('clustered', _.isFinite(mcOptions.minimumClusterSize));\n\t\n\t      markerClusterer = new _markerClusterer2.default(viewer.getNativeObject(), markers, mcOptions);\n\t\n\t      google.maps.event.addListenerOnce(markerClusterer, 'clusteringend', function () {\n\t        return clusteringDefer.resolve();\n\t      });\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @returns {*}\r\n\t     */\n\t    resolveClustering: function resolveClustering() {\n\t      return clusteringDefer.promise();\n\t    }\n\t  });\n\t\n\t  /* endregion privileged methods */\n\t\n\t  /* region init code */\n\t\n\t  viewer.addEventListener('mapviewchangeend', function () {\n\t\n\t    if (instance.isClusteringEnabled()) {\n\t      var clustered = instance.getData('clustered');\n\t\n\t      if (viewer.getZoom() >= 20) {\n\t\n\t        if (clustered) {\n\t          instance.performClustering({ minWeight: Infinity });\n\t        }\n\t      } else {\n\t\n\t        if (!clustered) {\n\t          instance.performClustering();\n\t        }\n\t      }\n\t    }\n\t  });\n\t\n\t  // Enable clustering by default.\n\t  instance.setClusteringEnabled(true);\n\t\n\t  instance.setVisible(true);\n\t  instance.setData('wrapper', instance);\n\t\n\t  /* endregion init code */\n\t});\n\t\n\tvar ClusteringLayer = stampit.compose(_layer.Layer, GoogleMapsClusteringLayer);\n\t\n\texports.default = ClusteringLayer;\n\texports.ClusteringLayer = ClusteringLayer;\n\n/***/ },\n\n/***/ 98:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Layer = exports.default = undefined;\n\t\n\tvar _googlemaps = __webpack_require__(35);\n\t\n\tvar _googlemaps2 = _interopRequireDefault(_googlemaps);\n\t\n\tvar _layer = __webpack_require__(37);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/**\r\n\t * Created by Glenn on 2015-07-30.\r\n\t */\n\t\n\tvar google = { maps: _googlemaps2.default };\n\t\n\t/**\r\n\t *\r\n\t * @extends {Layer}\r\n\t */\n\tvar GoogleMapsLayer = stampit().init(function (_ref) {\n\t  var instance = _ref.instance;\n\t  var viewer = instance.viewer;\n\t\n\t  /* region private properties */\n\t\n\t  /**\r\n\t   * Layer implementation in Google Maps is actually, well,\r\n\t   * an \"OverlayView\".\r\n\t   * @type {google.maps.OverlayView}\r\n\t   */\n\t\n\t  var overlay = new google.maps.OverlayView();\n\t\n\t  /*\r\n\t   *\r\n\t   */\n\t  var mapObjectList = {};\n\t\n\t  /* endregion private properties */\n\t\n\t  /* region privileged methods */\n\t\n\t  _.assign(instance, {\n\t\n\t    /**\r\n\t     *\r\n\t     * @returns {google.maps.OverlayView}\r\n\t     */\n\t\n\t    getNativeObject: function getNativeObject() {\n\t      return overlay;\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @param key\r\n\t     * @returns {*}\r\n\t     */\n\t    getData: function getData(key) {\n\t      return overlay.get(key);\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @param key\r\n\t     * @param value\r\n\t     */\n\t    setData: function setData(key, value) {\n\t\n\t      if (_.isPlainObject(key)) {\n\t        overlay.setValues(key);\n\t      } else {\n\t        overlay.set(key, value);\n\t      }\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @returns {boolean}\r\n\t     */\n\t    isVisible: function isVisible() {\n\t      return Boolean(overlay.getMap());\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @param visible\r\n\t     */\n\t    setVisible: function setVisible(visible) {\n\t      var map = visible ? viewer.getNativeObject() : undefined;\n\t\n\t      overlay.setMap(map);\n\t\n\t      _.forOwn(mapObjectList, function (mapObject) {\n\t        return mapObject.getNativeObject().setMap(map);\n\t      });\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @returns {*}\r\n\t     */\n\t    getObjects: function getObjects() {\n\t      return _(mapObjectList).map().compact().value();\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @param mapObjects\r\n\t     */\n\t    add: function add(mapObjects) {\n\t      mapObjects = _.isArray(mapObjects) ? mapObjects : [mapObjects];\n\t\n\t      _.forEach(mapObjects, function (mapObject) {\n\t        mapObjectList[mapObject.id] = mapObject;\n\t\n\t        mapObject.getNativeObject().setMap(viewer.getNativeObject());\n\t      });\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @param mapObjects\r\n\t     */\n\t    remove: function remove(mapObjects) {\n\t      mapObjects = _.isArray(mapObjects) ? mapObjects : [mapObjects];\n\t\n\t      _.forEach(mapObjects, function (mapObject) {\n\t        delete mapObjectList[mapObject.id];\n\t\n\t        var nativeObject = mapObject.getNativeObject();\n\t\n\t        nativeObject.setMap(undefined);\n\t\n\t        // Prevent memory leak.\n\t        google.maps.event.clearInstanceListeners(nativeObject);\n\t      });\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     */\n\t    clear: function clear() {\n\t      instance.remove(_(mapObjectList).map().compact().value());\n\t\n\t      mapObjectList = {};\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @returns {*}\r\n\t     */\n\t    getBounds: function getBounds() {\n\t      var mapObjects = instance.getObjects();\n\t      var bbox = void 0;\n\t\n\t      if (mapObjects.length > 0) {\n\t        (function () {\n\t          var nativeObject = mapObjects[0].getNativeObject();\n\t          var bounds = new google.maps.LatLngBounds();\n\t\n\t          // Bounds calculation for position or location layer.\n\t          if (nativeObject instanceof google.maps.Marker) {\n\t\n\t            _.forEach(mapObjects, function (mapObject) {\n\t              return bounds.extend(mapObject.getNativeObject().getPosition());\n\t            });\n\t          } else {\n\t            // For geofence layer.\n\t\n\t            _.forEach(mapObjects, function (mapObject) {\n\t              var _mapObject$getBounds = mapObject.getBounds();\n\t\n\t              var bottom = _mapObject$getBounds.bottom;\n\t              var right = _mapObject$getBounds.right;\n\t              var top = _mapObject$getBounds.top;\n\t              var left = _mapObject$getBounds.left;\n\t\n\t              var other = new google.maps.LatLngBounds(new google.maps.LatLng(bottom, right), new google.maps.LatLng(top, left));\n\t\n\t              bounds.union(other);\n\t            });\n\t          }\n\t\n\t          var ne = bounds.getNorthEast();\n\t          var sw = bounds.getSouthWest();\n\t\n\t          bbox = {\n\t            left: ne.lng(),\n\t            bottom: sw.lat(),\n\t            right: sw.lng(),\n\t            top: ne.lat()\n\t          };\n\t        })();\n\t      }\n\t\n\t      return bbox;\n\t    }\n\t  });\n\t\n\t  /* endregion privileged methods */\n\t\n\t  /* region init code */\n\t\n\t  _.assign(overlay, {\n\t    draw: _.noop,\n\t    onAdd: _.noop,\n\t    onRemove: _.noop\n\t  }).setMap(viewer.getNativeObject());\n\t\n\t  instance.setVisible(true);\n\t  instance.setData('wrapper', instance);\n\t\n\t  /* endregion init code */\n\t});\n\t\n\tvar Layer = stampit.compose(_layer.Layer, GoogleMapsLayer);\n\t\n\texports.default = Layer;\n\texports.Layer = Layer;\n\n/***/ },\n\n/***/ 99:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.MapObject = exports.default = undefined;\n\t\n\tvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**\r\n\t                                                                                                                                                                                                                                                                   * Created by Glenn on 2015-07-30.\r\n\t                                                                                                                                                                                                                                                                   */\n\t\n\tvar _googlemaps = __webpack_require__(35);\n\t\n\tvar _googlemaps2 = _interopRequireDefault(_googlemaps);\n\t\n\tvar _mapObject = __webpack_require__(60);\n\t\n\tvar _styler = __webpack_require__(15);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar google = { maps: _googlemaps2.default };\n\t\n\tvar styler = _styler.Styler.getInstance();\n\t\n\t/**\r\n\t * Concrete factory for creating map object using Google Maps JS API.\r\n\t * The created map object will act as an adapter for the corresponding\r\n\t * native Google Maps map object, implementing the \"abstract\" methods\r\n\t * specified in the more abstract map object.\r\n\t * @extends {MapObject}\r\n\t */\n\tvar GoogleMapsMapObject = stampit().init(function (_ref) {\n\t  var instance = _ref.instance;\n\t  var roamObject = instance.roamObject;\n\t  var viewer = instance.viewer;\n\t  var objectModel = instance.objectModel;\n\t\n\t  /* region private properties */\n\t\n\t  /*\r\n\t   *\r\n\t   */\n\t\n\t  var nativeObject = void 0;\n\t\n\t  /*\r\n\t   *\r\n\t   */\n\t  var eventTypes = {\n\t    click: 'click',\n\t    dragstart: 'dragstart',\n\t    drag: 'drag',\n\t    dragend: 'dragend',\n\t    mousedown: 'mousedown',\n\t    mouseup: 'mouseup',\n\t    mouseenter: 'mouseover',\n\t    mouseleave: 'mouseout',\n\t    mousemove: 'mousemove',\n\t    visibilitychange: 'visible_changed',\n\t    mapchange: 'map_changed'\n\t  };\n\t\n\t  /* endregion private properties */\n\t\n\t  /* region privileged methods */\n\t\n\t  _.assign(instance, {\n\t\n\t    /**\r\n\t     *\r\n\t     * @returns {*}\r\n\t     */\n\t\n\t    getNativeObject: function getNativeObject() {\n\t      return nativeObject;\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @param type\r\n\t     * @param listener\r\n\t     */\n\t    addEventListener: function addEventListener(type, listener) {\n\t      var eventType = eventTypes[type];\n\t\n\t      if (!_.isString(eventType)) {\n\t        throw new Error('Invalid event type: ' + type + '.');\n\t      }\n\t\n\t      listener.mapsEventListener = google.maps.event.addListener(nativeObject, eventType, listener);\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @param type\r\n\t     * @param listener\r\n\t     */\n\t    removeEventListener: function removeEventListener(type, listener) {\n\t      var eventType = eventTypes[type];\n\t\n\t      if (!_.isString(eventType)) {\n\t        throw new Error('Invalid event type: ' + type + '.');\n\t      }\n\t\n\t      google.maps.event.removeListener(listener.mapsEventListener);\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @param key\r\n\t     * @returns {*}\r\n\t     */\n\t    getData: function getData(key) {\n\t      return nativeObject.get(key);\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @param key\r\n\t     * @param value\r\n\t     */\n\t    setData: function setData(key, value) {\n\t\n\t      if (_.isPlainObject(key)) {\n\t        nativeObject.setValues(key);\n\t      } else {\n\t        nativeObject.set(key, value);\n\t      }\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @param effective\r\n\t     * @returns {*}\r\n\t     */\n\t    isVisible: function isVisible(effective) {\n\t      var visible = nativeObject.getVisible();\n\t\n\t      if (effective) {\n\t        visible = visible && Boolean(nativeObject.getMap());\n\t      }\n\t\n\t      return visible;\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @param visible\r\n\t     */\n\t    setVisible: function setVisible(visible) {\n\t      nativeObject.setVisible(visible);\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @returns {boolean}\r\n\t     */\n\t    isWithinViewBounds: function isWithinViewBounds() {\n\t      var nativeBounds = viewer.getBoundingBox().getNativeBounds();\n\t      var withinViewBounds = false;\n\t\n\t      if (nativeObject instanceof google.maps.Marker) {\n\t        withinViewBounds = nativeBounds.contains(nativeObject.getPosition());\n\t      } else {\n\t\n\t        if (_.isFunction(nativeObject.getBounds)) {\n\t          withinViewBounds = nativeBounds.intersects(nativeObject.getBounds());\n\t        } else {\n\t          withinViewBounds = _.some(nativeObject.getPath().getArray(), function (latLng) {\n\t            return nativeBounds.contains(latLng);\n\t          });\n\t        }\n\t      }\n\t\n\t      return withinViewBounds;\n\t    }\n\t  });\n\t\n\t  /* endregion privileged methods */\n\t\n\t  /* region init code */\n\t\n\t  objectModel = instance.objectModel = objectModel || instance.createDefaultObjectModel();\n\t  objectModel.options = _extends({}, objectModel.options);\n\t\n\t  /*\r\n\t   * Create the native Google Maps object.\r\n\t   */\n\t  var factoryMethod = instance.getFactoryMethod(objectModel.shapeType);\n\t  nativeObject = factoryMethod(objectModel, viewer);\n\t\n\t  /* region setup wrapper methods */\n\t\n\t  /*\r\n\t   * Enrich this map object with type-specific adapter methods.\r\n\t   */\n\t  if (nativeObject instanceof google.maps.Marker) {\n\t\n\t    /*\r\n\t     * Marker.\r\n\t     */\n\t    _.assign(instance, {\n\t\n\t      /**\r\n\t       *\r\n\t       * @returns {*}\r\n\t       */\n\t\n\t      getPosition: function getPosition() {\n\t        var position = nativeObject.getPosition();\n\t\n\t        return {\n\t          lat: position.lat(),\n\t          lng: position.lng()\n\t        };\n\t      },\n\t\n\t\n\t      /**\r\n\t       *\r\n\t       * @param position\r\n\t       */\n\t      setPosition: function setPosition(position) {\n\t        var lat = position.lat;\n\t        var lng = position.lng;\n\t\n\t\n\t        objectModel.coordinates = [lat, lng];\n\t\n\t        var oldPosition = nativeObject.getPosition();\n\t        var newPosition = new google.maps.LatLng(lat, lng);\n\t\n\t        if (!newPosition.equals(oldPosition)) {\n\t          nativeObject.setPosition(newPosition);\n\t        }\n\t      },\n\t\n\t\n\t      /**\r\n\t       *\r\n\t       * @returns {*}\r\n\t       */\n\t      getIcon: function getIcon() {\n\t        return nativeObject.getIcon();\n\t      },\n\t\n\t\n\t      /**\r\n\t       *\r\n\t       * @param icon\r\n\t       */\n\t      setIcon: function setIcon(icon) {\n\t        var model = icon.model;\n\t        var options = icon.options;\n\t\n\t        var url = model;\n\t\n\t        /*\r\n\t         * See the below comment in .createMarker() method.\r\n\t         */\n\t        if (url.match(/<svg/i)) {\n\t          url = 'data:image/svg+xml;charset=UTF-8;base64,' + btoa(url);\n\t        }\n\t\n\t        nativeObject.setIcon(_extends({\n\t          url: url\n\t        }, options));\n\t      },\n\t\n\t\n\t      /**\r\n\t       *\r\n\t       */\n\t      updateIcon: function updateIcon() {\n\t        instance.setData('originalIcon', instance.getIcon());\n\t        instance.setIcon({\n\t          model: styler.getRoamIcon(instance.roamObject, !kendo.support.browser.msie)\n\t        });\n\t\n\t        /*\r\n\t         * Add a nice animation's lick. =p\r\n\t         */\n\t        instance.bounce();\n\t      },\n\t\n\t\n\t      /**\r\n\t       *\r\n\t       */\n\t      revertIcon: function revertIcon() {\n\t        var originalIcon = instance.getData('originalIcon');\n\t\n\t        if (originalIcon) {\n\t          instance.setIcon({\n\t            model: originalIcon.url\n\t          });\n\t        }\n\t      },\n\t\n\t\n\t      /**\r\n\t       *\r\n\t       * @param opacity\r\n\t       */\n\t      setOpacity: function setOpacity(opacity) {\n\t        nativeObject.setOpacity(opacity);\n\t      },\n\t\n\t\n\t      /**\r\n\t       *\r\n\t       */\n\t      bounce: function bounce() {\n\t        var bounceDuration = 3000; // in milliseconds\n\t\n\t        nativeObject.setAnimation(google.maps.Animation.BOUNCE);\n\t        setTimeout(function () {\n\t          return nativeObject.setAnimation(undefined);\n\t        }, bounceDuration);\n\t      }\n\t    });\n\t  } else {\n\t\n\t    /*\r\n\t     * Spatial geoshape.\r\n\t     */\n\t    if (nativeObject instanceof google.maps.Circle) {\n\t\n\t      /*\r\n\t       * Circle.\r\n\t       */\n\t      _.assign(instance, {\n\t\n\t        /**\r\n\t         *\r\n\t         * @param center\r\n\t         */\n\t\n\t        setCenter: function setCenter(center) {\n\t          var lat = center.lat;\n\t          var lng = center.lng;\n\t\n\t\n\t          objectModel.coordinates[0] = lat;\n\t          objectModel.coordinates[1] = lng;\n\t\n\t          var oldCenter = nativeObject.getCenter();\n\t          var newCenter = new google.maps.LatLng(lat, lng);\n\t\n\t          if (!newCenter.equals(oldCenter)) {\n\t            nativeObject.setCenter(newCenter);\n\t          }\n\t        },\n\t\n\t\n\t        /**\r\n\t         *\r\n\t         * @param radius\r\n\t         */\n\t        setRadius: function setRadius(radius) {\n\t          objectModel.coordinates[2] = radius;\n\t\n\t          if (radius !== nativeObject.getRadius()) {\n\t            nativeObject.setRadius(radius);\n\t          }\n\t        }\n\t      });\n\t    } else {\n\t\n\t      /*\r\n\t       * - Polyline,\r\n\t       * - Polygon,\r\n\t       * - Rectangle.\r\n\t       */\n\t      _.assign(instance, {\n\t\n\t        /**\r\n\t         *\r\n\t         * @returns {Object} bbox\r\n\t         */\n\t\n\t        getBounds: function getBounds() {\n\t          var bounds = new google.maps.LatLngBounds();\n\t\n\t          if (_.isFunction(nativeObject.getBounds)) {\n\t            bounds = nativeObject.getBounds();\n\t          } else {\n\t            var path = nativeObject.getPath();\n\t\n\t            _.forEach(path.getArray(), function (latLng) {\n\t              return bounds.extend(latLng);\n\t            });\n\t          }\n\t\n\t          var ne = bounds.getNorthEast();\n\t          var sw = bounds.getSouthWest();\n\t\n\t          return {\n\t            left: ne.lng(),\n\t            bottom: sw.lat(),\n\t            right: sw.lng(),\n\t            top: ne.lat()\n\t          };\n\t        },\n\t\n\t\n\t        /**\r\n\t         *\r\n\t         * @returns {{lat: number, lng: number}}\r\n\t         */\n\t        getCenterBounds: function getCenterBounds() {\n\t          var _instance$getBounds = instance.getBounds();\n\t\n\t          var right = _instance$getBounds.right;\n\t          var left = _instance$getBounds.left;\n\t          var top = _instance$getBounds.top;\n\t          var bottom = _instance$getBounds.bottom;\n\t\n\t          var deltaX = (right - left) / 2;\n\t          var deltaY = (top - bottom) / 2;\n\t\n\t          return {\n\t            lat: bottom + deltaY,\n\t            lng: left + deltaX\n\t          };\n\t        }\n\t      });\n\t\n\t      if (nativeObject instanceof google.maps.Rectangle) {\n\t\n\t        /*\r\n\t         * Rectangle.\r\n\t         */\n\t        _.assign(instance, {\n\t\n\t          /**\r\n\t           *\r\n\t           * @param bounds\r\n\t           */\n\t\n\t          setBounds: function setBounds(bounds) {\n\t            var right = bounds.right;\n\t            var left = bounds.left;\n\t            var top = bounds.top;\n\t            var bottom = bounds.bottom;\n\t\n\t            objectModel.coordinates = [top, left, bottom, right];\n\t\n\t            var oldBounds = nativeObject.getBounds();\n\t            var newBounds = new google.maps.LatLngBounds(new google.maps.LatLng(bottom, right), new google.maps.LatLng(top, left));\n\t\n\t            if (!newBounds.equals(oldBounds)) {\n\t              nativeObject.setBounds(newBounds);\n\t            }\n\t          }\n\t        });\n\t      } else {\n\t\n\t        /*\r\n\t         * - Polyline,\r\n\t         * - Polygon.\r\n\t         */\n\t        _.assign(instance, {\n\t\n\t          /**\r\n\t           *\r\n\t           * @param coordinates\r\n\t           */\n\t\n\t          setCoordinates: function setCoordinates(coordinates) {\n\t            objectModel.coordinates = coordinates;\n\t\n\t            var oldPath = nativeObject.getPath();\n\t            var coordinatesChanged = true;\n\t\n\t            if (oldPath) {\n\t              (function () {\n\t                var oldCoordinates = oldPath.getArray();\n\t\n\t                coordinatesChanged = _.some(coordinates, function (coordinate, i) {\n\t                  return coordinate !== oldCoordinates[i];\n\t                });\n\t              })();\n\t            }\n\t\n\t            if (coordinatesChanged) {\n\t              nativeObject.setPath(viewer.getMapObjectFactory().toPoints(coordinates));\n\t            }\n\t          }\n\t        });\n\t      }\n\t    }\n\t  }\n\t\n\t  /* endregion setup wrapper methods */\n\t\n\t  if (roamObject) {\n\t\n\t    // Setup default ROAM data.\n\t    instance.setData(instance.createDefaultRoamData());\n\t\n\t    // Setup default event listeners.\n\t    instance.addEventListener('click', instance.createDefaultClickListener());\n\t    instance.addEventListener('mouseenter', instance.createDefaultMouseEnterListener());\n\t    instance.addEventListener('mouseleave', instance.createDefaultMouseLeaveListener());\n\t\n\t    // Bind label's visibility to object's visibility.\n\t    var visibilityChangedListener = instance.createDefaultVisibilityChangedListener();\n\t    instance.addEventListener('visibilitychange', visibilityChangedListener);\n\t    instance.addEventListener('mapchange', visibilityChangedListener);\n\t  }\n\t\n\t  instance.setData('wrapper', instance);\n\t\n\t  /* endregion init code */\n\t}).static({\n\t\n\t  /**\r\n\t   *\r\n\t   * @param objectModel\r\n\t   * @param viewer\r\n\t   * @returns {*}\r\n\t   */\n\t\n\t  createMarker: function createMarker(objectModel, viewer) {\n\t    var coordinates = objectModel.coordinates;\n\t    var options = objectModel.options;\n\t    var label = options.label;\n\t    var icon = options.icon;\n\t    var editable = options.editable;\n\t    var draggable = options.draggable;\n\t    var lat = objectModel.lat;\n\t    var lng = objectModel.lng;\n\t\n\t\n\t    if (!(_.isFinite(lat) && _.isFinite(lng))) {\n\t      var _coordinates = _slicedToArray(coordinates, 2);\n\t\n\t      lat = _coordinates[0];\n\t      lng = _coordinates[1];\n\t    }\n\t\n\t    var marker = new google.maps.Marker({\n\t      //animation: options.editable ? null : google.maps.Animation.BOUNCE,\n\t      //animation: options.editable ? null : google.maps.Animation.DROP,\n\t      label: label,\n\t      position: new google.maps.LatLng(lat, lng)\n\t    });\n\t\n\t    if (icon && icon.model) {\n\t      var url = icon.model;\n\t\n\t      /**\r\n\t       * Darn. Gotta do this for passing SVG DOM object as icon.\r\n\t       * @see https://code.google.com/p/gmaps-api-issues/issues/detail?id=6505\r\n\t       */\n\t      if (url.match(/svg/i)) {\n\t        url = 'data:image/svg+xml;charset=UTF-8;base64,' + btoa(url);\n\t      }\n\t\n\t      marker.setIcon(_extends({\n\t        url: url\n\t      }, options));\n\t    }\n\t\n\t    var editManager = viewer.getEditManager();\n\t\n\t    if (draggable) {\n\t      marker.setDraggable(true);\n\t\n\t      google.maps.event.addListener(marker, 'drag', function (_ref2) {\n\t        var latLng = _ref2.latLng;\n\t\n\t        var lat = latLng.lat();\n\t        var lng = latLng.lng();\n\t        var coordinates = [lat, lng];\n\t\n\t        marker.get('wrapper').setPosition({\n\t          lat: lat,\n\t          lng: lng\n\t        });\n\t\n\t        if (editable) {\n\t          editManager.setEditableObjectCoordinates(coordinates);\n\t        }\n\t      });\n\t    }\n\t\n\t    if (editable) {\n\t      var editModeClickListener = function editModeClickListener(_ref3) {\n\t        var latLng = _ref3.latLng;\n\t\n\t        editManager.setEditableObjectCoordinates([latLng.lat(), latLng.lng()]);\n\t      };\n\t\n\t      marker.set('editModeClickListener', editModeClickListener);\n\t      viewer.addEventListener('click', editModeClickListener);\n\t    }\n\t\n\t    return marker;\n\t  },\n\t\n\t\n\t  /**\r\n\t   *\r\n\t   * @param objectModel\r\n\t   * @param viewer\r\n\t   * @returns {*}\r\n\t   */\n\t  createPolyline: function createPolyline(objectModel, viewer) {\n\t    var coordinates = objectModel.coordinates;\n\t    var options = objectModel.options;\n\t    var draggable = options.draggable;\n\t    var editable = options.editable;\n\t    var styleName = options.styleName;\n\t\n\t    var mapObjectFactory = viewer.getMapObjectFactory();\n\t\n\t    var polyline = new google.maps.Polyline({\n\t      draggable: draggable,\n\t      path: mapObjectFactory.toPoints(coordinates)\n\t    });\n\t\n\t    if (editable) {\n\t      polyline = mapObjectFactory.toEditablePolyShape(polyline, objectModel, viewer);\n\t    }\n\t\n\t    if (styleName) {\n\t      var style = mapObjectFactory.createNormalizedShapeStyle(styleName, viewer);\n\t      var strokeColor = style.strokeColor;\n\t      var strokeOpacity = style.strokeOpacity;\n\t      var strokeWeight = style.strokeWeight;\n\t      var fillColor = style.fillColor;\n\t      var fillOpacity = style.fillOpacity;\n\t      var icons = style.icons;\n\t\n\t\n\t      polyline.setOptions({\n\t        strokeColor: strokeColor,\n\t        strokeOpacity: strokeOpacity,\n\t        strokeWeight: strokeWeight,\n\t        fillColor: fillColor,\n\t        fillOpacity: fillOpacity,\n\t        icons: icons\n\t      });\n\t    }\n\t\n\t    return polyline;\n\t  },\n\t\n\t\n\t  /**\r\n\t   *\r\n\t   * @param objectModel\r\n\t   * @param viewer\r\n\t   * @returns {*}\r\n\t   */\n\t  createPolygon: function createPolygon(objectModel, viewer) {\n\t    var coordinates = objectModel.coordinates;\n\t    var options = objectModel.options;\n\t    var draggable = options.draggable;\n\t    var editable = options.editable;\n\t    var styleName = options.styleName;\n\t\n\t    var mapObjectFactory = viewer.getMapObjectFactory();\n\t\n\t    var polygon = new google.maps.Polygon({\n\t      draggable: draggable,\n\t      paths: mapObjectFactory.toPoints(coordinates)\n\t    });\n\t\n\t    if (editable) {\n\t      polygon = mapObjectFactory.toEditablePolyShape(polygon, objectModel, viewer);\n\t    }\n\t\n\t    if (styleName) {\n\t      var style = mapObjectFactory.createNormalizedShapeStyle(styleName, viewer);\n\t      var strokeColor = style.strokeColor;\n\t      var strokeWeight = style.strokeWeight;\n\t      var fillColor = style.fillColor;\n\t      var fillOpacity = style.fillOpacity;\n\t\n\t\n\t      polygon.setOptions({\n\t        strokeColor: strokeColor,\n\t        strokeWeight: strokeWeight,\n\t        fillColor: fillColor,\n\t        fillOpacity: fillOpacity\n\t      });\n\t    }\n\t\n\t    return polygon;\n\t  },\n\t\n\t\n\t  /**\r\n\t   *\r\n\t   * @param polyShape\r\n\t   * @param objectModel\r\n\t   * @param viewer\r\n\t   * @returns {*}\r\n\t   */\n\t  toEditablePolyShape: function toEditablePolyShape(polyShape, objectModel, viewer) {\n\t    var coordinates = objectModel.coordinates;\n\t\n\t    var mapObjectFactory = viewer.getMapObjectFactory();\n\t    var editManager = viewer.getEditManager();\n\t    var pointCount = _.floor(coordinates.length / 2);\n\t\n\t    /*\r\n\t     * Incremental creation of a poly-* generally starts\r\n\t     * with a single point.\r\n\t     */\n\t    if (pointCount === 1) {\n\t      polyShape = mapObjectFactory.createMarker(objectModel, viewer);\n\t\n\t      /*\r\n\t       * Remove leftover click listener of editable marker\r\n\t       * object type. At this point, `polyShape` is actually\r\n\t       * a marker.\r\n\t       */\n\t      viewer.removeEventListener('click', polyShape.get('editModeClickListener'));\n\t    } else {\n\t      var editingEventListener = function editingEventListener() {\n\t        editManager.setEditableObjectCoordinates(mapObjectFactory.toCoordinates(polyShape.getPath()));\n\t      };\n\t\n\t      polyShape.setEditable(true);\n\t\n\t      /*\r\n\t       * Here, the polyshape is already a polyline or polygon.\r\n\t       */\n\t      var path = polyShape.getPath();\n\t\n\t      google.maps.event.addListener(path, 'insert_at', editingEventListener);\n\t      google.maps.event.addListener(path, 'remove_at', editingEventListener);\n\t      google.maps.event.addListener(path, 'set_at', editingEventListener);\n\t    }\n\t\n\t    function editModeClickListener(_ref4) {\n\t      var latLng = _ref4.latLng;\n\t\n\t      var coordinates_ = editManager.getEditableObjectCoordinates();\n\t      var editableObject = editManager.getEditableObject();\n\t      var nativeObject = editableObject.getNativeObject();\n\t\n\t      coordinates_.push(latLng.lat(), latLng.lng());\n\t\n\t      if (nativeObject instanceof google.maps.Marker) {\n\t        var _editableObject = editableObject;\n\t        var _objectModel = _editableObject.objectModel;\n\t\n\t        /*\r\n\t         * Transform from marker to poly-* shape.\r\n\t         */\n\t\n\t        editableObject = mapObjectFactory.create({\n\t          viewer: viewer,\n\t          objectModel: _extends({}, _objectModel, { coordinates: coordinates_ })\n\t        });\n\t\n\t        editManager.setEditableObject(editableObject);\n\t      } else {\n\t        editManager.setEditableObjectCoordinates(coordinates_);\n\t      }\n\t    }\n\t\n\t    polyShape.set('editModeClickListener', editModeClickListener);\n\t    viewer.addEventListener('click', editModeClickListener);\n\t\n\t    return polyShape;\n\t  },\n\t\n\t\n\t  /**\r\n\t   *\r\n\t   * @param objectModel\r\n\t   * @param viewer\r\n\t   */\n\t  createRectangle: function createRectangle(objectModel, viewer) {\n\t    var coordinates = objectModel.coordinates;\n\t    var options = objectModel.options;\n\t    var draggable = options.draggable;\n\t    var editable = options.editable;\n\t    var styleName = options.styleName;\n\t\n\t    var mapObjectFactory = viewer.getMapObjectFactory();\n\t\n\t    var points = mapObjectFactory.toPoints(coordinates);\n\t\n\t    var _points = _slicedToArray(points, 2);\n\t\n\t    var point1 = _points[0];\n\t    var point2 = _points[1];\n\t\n\t    var bounds = new google.maps.LatLngBounds(new google.maps.LatLng(point1.lat, point1.lng));\n\t\n\t    if (point2) {\n\t      bounds.extend(new google.maps.LatLng(point2.lat, point2.lng));\n\t    }\n\t\n\t    var rectangle = new google.maps.Rectangle({\n\t      bounds: bounds,\n\t      draggable: draggable\n\t    });\n\t\n\t    if (editable) {\n\t      (function () {\n\t        rectangle.setEditable(true);\n\t\n\t        var editManager = viewer.getEditManager();\n\t        var ne = bounds.getNorthEast();\n\t        var distance = editManager.getEditableObjectBufferDistance() || 10000;\n\t        var heading = 135;\n\t        /*\r\n\t         * Default south-west corner of editable rectangle.\r\n\t         */\n\t        var sw = google.maps.geometry.spherical.computeOffset(ne, distance, heading);\n\t\n\t        coordinates.push(sw.lat(), sw.lng());\n\t        bounds.extend(sw);\n\t\n\t        google.maps.event.addListener(rectangle, 'bounds_changed', function () {\n\t          var bounds_ = rectangle.getBounds();\n\t          var ne = bounds_.getNorthEast();\n\t          var sw = bounds_.getSouthWest();\n\t          var coordinates = [ne.lat(), ne.lng(), sw.lat(), sw.lng()];\n\t\n\t          editManager.setEditableObjectCoordinates(coordinates);\n\t        });\n\t      })();\n\t    }\n\t\n\t    if (styleName) {\n\t      var style = mapObjectFactory.createNormalizedShapeStyle(styleName, viewer);\n\t      var strokeColor = style.strokeColor;\n\t      var strokeWeight = style.strokeWeight;\n\t      var fillColor = style.fillColor;\n\t      var fillOpacity = style.fillOpacity;\n\t\n\t\n\t      rectangle.setOptions({\n\t        strokeColor: strokeColor,\n\t        strokeWeight: strokeWeight,\n\t        fillColor: fillColor,\n\t        fillOpacity: fillOpacity\n\t      });\n\t    }\n\t\n\t    return rectangle;\n\t  },\n\t\n\t\n\t  /**\r\n\t   *\r\n\t   * @param objectModel\r\n\t   * @param viewer\r\n\t   */\n\t  createCircle: function createCircle(objectModel, viewer) {\n\t    var coordinates = objectModel.coordinates;\n\t    var options = objectModel.options;\n\t    var draggable = options.draggable;\n\t    var editable = options.editable;\n\t    var styleName = options.styleName;\n\t\n\t    var mapObjectFactory = viewer.getMapObjectFactory();\n\t\n\t    var circle = new google.maps.Circle({\n\t      draggable: draggable,\n\t      center: new google.maps.LatLng(coordinates[0], coordinates[1]),\n\t      radius: coordinates[2]\n\t    });\n\t\n\t    if (editable) {\n\t      (function () {\n\t        var editingEventListener = function editingEventListener() {\n\t          var center = circle.getCenter();\n\t          var radius = circle.getRadius();\n\t          var coordinates = [center.lat(), center.lng(), radius];\n\t\n\t          editManager.setEditableObjectCoordinates(coordinates);\n\t          editManager.setEditableObjectBufferDistance(radius);\n\t        };\n\t\n\t        circle.setEditable(true);\n\t\n\t        var editManager = viewer.getEditManager();\n\t        /*\r\n\t         * Default radius of editable circle.\r\n\t         */\n\t        var radius = editManager.getEditableObjectBufferDistance() || 10000;\n\t\n\t        coordinates[2] = radius;\n\t        circle.setRadius(radius);\n\t\n\t        google.maps.event.addListener(circle, 'radius_changed', editingEventListener);\n\t        google.maps.event.addListener(circle, 'center_changed', editingEventListener);\n\t      })();\n\t    }\n\t\n\t    if (styleName) {\n\t      var style = mapObjectFactory.createNormalizedShapeStyle(styleName, viewer);\n\t      var strokeColor = style.strokeColor;\n\t      var strokeWeight = style.strokeWeight;\n\t      var fillColor = style.fillColor;\n\t      var fillOpacity = style.fillOpacity;\n\t\n\t\n\t      circle.setOptions({\n\t        strokeColor: strokeColor,\n\t        strokeWeight: strokeWeight,\n\t        fillColor: fillColor,\n\t        fillOpacity: fillOpacity\n\t      });\n\t    }\n\t\n\t    return circle;\n\t  },\n\t\n\t\n\t  /**\r\n\t   *\r\n\t   * @param style\r\n\t   * @returns {{}}\r\n\t   */\n\t  normalizeShapeStyle: function normalizeShapeStyle(style) {\n\t    var defaultStyle = {\n\t      strokeColor: '#0055aa',\n\t      strokeOpacity: 0.6,\n\t      strokeWeight: 2,\n\t      fillColor: '#0055aa',\n\t      fillOpacity: 0.4\n\t    };\n\t    var normalizedStyle = _extends({}, defaultStyle, style);\n\t\n\t    /**\r\n\t     *\r\n\t     * @see https://developers.google.com/maps/documentation/javascript/3.exp/reference#IconSequence\r\n\t     * @see https://developers.google.com/maps/documentation/javascript/3.exp/reference#Symbol\r\n\t     */\n\t    var arrows = normalizedStyle.arrows;\n\t\n\t\n\t    if (arrows) {\n\t      var defaultIconSequence = {\n\t        icon: {\n\t          path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW,\n\t          scale: 1.2 * 1.6,\n\t\n\t          //strokeColor  : '#000000',\n\t          //strokeColor  : '#ffffff',\n\t          strokeColor: '#0055aa',\n\t          strokeOpacity: 0.5,\n\t          strokeWeight: 0.5,\n\t          fillColor: '#ffffff',\n\t\n\t          //fillColor    : '#000000',\n\t          fillOpacity: 0.75\n\t        },\n\t        repeat: '5%'\n\t      };\n\t\n\t      var length = arrows.length;\n\t      var width = arrows.width;\n\t      var fillColor = arrows.fillColor;\n\t      var fillOpacity = arrows.fillOpacity;\n\t      var frequency = arrows.frequency;\n\t\n\t\n\t      var arrowStyle = {\n\t        icon: {\n\t          fillColor: fillColor,\n\t          fillOpacity: fillOpacity,\n\t          scale: _.isFinite(length) && _.isFinite(width) ? length * width : undefined\n\t        },\n\t        repeat: _.isFinite(frequency) ? frequency + '%' : undefined\n\t      };\n\t\n\t      normalizedStyle.icons = [_.merge({}, defaultIconSequence, arrowStyle)];\n\t    }\n\t\n\t    return normalizedStyle;\n\t  }\n\t});\n\t\n\tvar MapObject = stampit.compose(_mapObject.MapObject, GoogleMapsMapObject);\n\t\n\texports.default = MapObject;\n\texports.MapObject = MapObject;\n\n/***/ },\n\n/***/ 100:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.RoutingEngine = exports.default = undefined;\n\t\n\tvar _googlemaps = __webpack_require__(35);\n\t\n\tvar _googlemaps2 = _interopRequireDefault(_googlemaps);\n\t\n\tvar _routingEngine = __webpack_require__(61);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/**\r\n\t *\r\n\t * @implements {RoutingEngine}\r\n\t */\n\t/**\r\n\t * Created by Glenn on 2015-08-13.\r\n\t */\n\t\n\tvar GoogleMapsRoutingEngine = stampit().init(function (_ref) {\n\t  var instance = _ref.instance;\n\t  var routingManager = instance.routingManager;\n\t  var viewer = instance.viewer;\n\t\n\t  /* region private properties */\n\t\n\t  /*\r\n\t   *\r\n\t   */\n\t\n\t  var placesService = void 0;\n\t\n\t  /*\r\n\t   *\r\n\t   */\n\t  var routingService = void 0;\n\t\n\t  /* endregion private properties */\n\t\n\t  /* region privileged methods */\n\t\n\t  _.assign(instance, {\n\t\n\t    /**\r\n\t     *\r\n\t     * @param query\r\n\t     * @returns {Promise}\r\n\t     */\n\t\n\t    searchPlaces: function searchPlaces(query) {\n\t      var defer = $.Deferred();\n\t\n\t      var _viewer$getBoundingBo = viewer.getBoundingBox();\n\t\n\t      var bottom = _viewer$getBoundingBo.bottom;\n\t      var right = _viewer$getBoundingBo.right;\n\t      var top = _viewer$getBoundingBo.top;\n\t      var left = _viewer$getBoundingBo.left;\n\t\n\t\n\t      placesService.textSearch({\n\t        query: query,\n\t        bounds: new google.maps.LatLngBounds(new google.maps.LatLng(bottom, right), new google.maps.LatLng(top, left))\n\t      }, function (results, status) {\n\t\n\t        if (status === google.maps.places.PlacesServiceStatus.OK) {\n\t          var places = _.map(results, function (item) {\n\t            var geometry = item.geometry;\n\t            var name = item.name;\n\t            var formatted_address = item.formatted_address;\n\t            var location = geometry.location;\n\t\n\t\n\t            return {\n\t              icon: 'mc-icon-routing-typeaddress',\n\t              lat: location.lat(),\n\t              lng: location.lng(),\n\t              name: name + ', ' + formatted_address\n\t            };\n\t          });\n\t\n\t          defer.resolve(places);\n\t        } else {\n\t          defer.reject({ message: status });\n\t        }\n\t      });\n\t\n\t      return defer.promise();\n\t    },\n\t\n\t\n\t    /**\r\n\t     *\r\n\t     * @returns {Promise}\r\n\t     */\n\t    calculateRoute: function calculateRoute() {\n\t      var defer = $.Deferred();\n\t      var waypoints = routingManager.getValidWaypoints();\n\t      var start = waypoints.shift();\n\t      var end = waypoints.pop();\n\t\n\t      var _routingManager$getRo = routingManager.getRouteFeatures();\n\t\n\t      var tollroad = _routingManager$getRo.tollroad;\n\t      var motorway = _routingManager$getRo.motorway;\n\t      var boatFerry = _routingManager$getRo.boatFerry;\n\t\n\t      var request = {\n\t        avoidTolls: tollroad < 0,\n\t        avoidHighways: motorway < 0,\n\t        avoidFerries: boatFerry < 0,\n\t        travelMode: google.maps.TravelMode.DRIVING,\n\t        origin: new google.maps.LatLng(start.lat, start.lng),\n\t        destination: new google.maps.LatLng(end.lat, end.lng),\n\t        waypoints: _.map(waypoints, function (waypoint) {\n\t          return {\n\t            location: new google.maps.LatLng(waypoint.lat, waypoint.lng),\n\t            stopover: true\n\t          };\n\t        })\n\t      };\n\t\n\t      routingService.route(request, function (response, status) {\n\t\n\t        if (status === google.maps.DirectionsStatus.OK) {\n\t          (function () {\n\t            var route = response.routes[0];\n\t            var routingResult = {\n\t              path: [],\n\t              legs: [],\n\t              summary: {},\n\t              maneuvers: []\n\t            };\n\t            var path = routingResult.path;\n\t            var legs = routingResult.legs;\n\t            var summary = routingResult.summary;\n\t            var maneuvers = routingResult.maneuvers;\n\t\n\t\n\t            _.forEach(route.legs, function (leg) {\n\t              var distance = leg.distance;\n\t              var duration = leg.duration;\n\t\n\t\n\t              legs.push({\n\t                firstPointIndex: path.length,\n\t                length: distance.value,\n\t                traveltime: duration.value\n\t              });\n\t\n\t              _.forEach(leg.steps, function (step) {\n\t                var instructions = step.instructions;\n\t                var maneuver = step.maneuver;\n\t\n\t\n\t                maneuvers.push({\n\t                  instruction: instructions,\n\t                  baseCssAction: 'adp-maneuver',\n\t                  action: maneuver\n\t                });\n\t\n\t                _.forEach(step.path, function (latLng) {\n\t                  path.push({\n\t                    lat: parseFloat(latLng.lat().toFixed(8)),\n\t                    lng: parseFloat(latLng.lng().toFixed(8))\n\t                  });\n\t                });\n\t              });\n\t            });\n\t\n\t            _.assign(summary, _.transform(legs, function (result, leg) {\n\t              var traveltime = leg.traveltime;\n\t              var length = leg.length;\n\t\n\t\n\t              result.duration = result.duration + traveltime;\n\t              result.distance = result.distance + length;\n\t            }), { duration: 0, distance: 0 });\n\t\n\t            defer.resolve(routingResult);\n\t          })();\n\t        } else {\n\t          defer.reject({ message: status });\n\t        }\n\t      });\n\t\n\t      return defer.promise();\n\t    }\n\t  });\n\t\n\t  /* endregion privileged methods */\n\t\n\t  /* region init code */\n\t\n\t  placesService = new google.maps.places.PlacesService(viewer.getNativeObject());\n\t\n\t  routingService = new google.maps.DirectionsService();\n\t\n\t  /* endregion init code */\n\t});\n\t\n\tvar RoutingEngine = stampit.compose(_routingEngine.RoutingEngine, GoogleMapsRoutingEngine);\n\t\n\texports.default = RoutingEngine;\n\texports.RoutingEngine = RoutingEngine;\n\n/***/ },\n\n/***/ 230:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\t__webpack_require__(23)(__webpack_require__(242));\n\n/***/ },\n\n/***/ 242:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"function ClusterIcon(cluster,styles){cluster.getMarkerClusterer().extend(ClusterIcon,google.maps.OverlayView),this.cluster_=cluster,this.className_=cluster.getMarkerClusterer().getClusterClass(),this.styles_=styles,this.center_=null,this.div_=null,this.sums_=null,this.visible_=!1,this.setMap(cluster.getMap())}function Cluster(mc){this.markerClusterer_=mc,this.map_=mc.getMap(),this.gridSize_=mc.getGridSize(),this.minClusterSize_=mc.getMinimumClusterSize(),this.averageCenter_=mc.getAverageCenter(),this.hideLabel_=mc.getHideLabel(),this.markers_=[],this.center_=null,this.bounds_=null,this.clusterIcon_=new ClusterIcon(this,mc.getStyles())}function MarkerClusterer(map,opt_markers,opt_options){this.extend(MarkerClusterer,google.maps.OverlayView),opt_markers=opt_markers||[],opt_options=opt_options||{},this.markers_=[],this.clusters_=[],this.listeners_=[],this.activeMap_=null,this.ready_=!1,this.gridSize_=opt_options.gridSize||60,this.minClusterSize_=opt_options.minimumClusterSize||2,this.maxZoom_=opt_options.maxZoom||null,this.styles_=opt_options.styles||[],this.title_=opt_options.title||\\\"\\\",this.zoomOnClick_=!0,void 0!==opt_options.zoomOnClick&&(this.zoomOnClick_=opt_options.zoomOnClick),this.averageCenter_=!1,void 0!==opt_options.averageCenter&&(this.averageCenter_=opt_options.averageCenter),this.ignoreHidden_=!1,void 0!==opt_options.ignoreHidden&&(this.ignoreHidden_=opt_options.ignoreHidden),this.enableRetinaIcons_=!1,void 0!==opt_options.enableRetinaIcons&&(this.enableRetinaIcons_=opt_options.enableRetinaIcons),this.hideLabel_=!1,void 0!==opt_options.hideLabel&&(this.hideLabel_=opt_options.hideLabel),this.imagePath_=opt_options.imagePath||MarkerClusterer.IMAGE_PATH,this.imageExtension_=opt_options.imageExtension||MarkerClusterer.IMAGE_EXTENSION,this.imageSizes_=opt_options.imageSizes||MarkerClusterer.IMAGE_SIZES,this.calculator_=opt_options.calculator||MarkerClusterer.CALCULATOR,this.batchSize_=opt_options.batchSize||MarkerClusterer.BATCH_SIZE,this.batchSizeIE_=opt_options.batchSizeIE||MarkerClusterer.BATCH_SIZE_IE,this.clusterClass_=opt_options.clusterClass||\\\"cluster\\\",-1!==navigator.userAgent.toLowerCase().indexOf(\\\"msie\\\")&&(this.batchSize_=this.batchSizeIE_),this.setupStyles_(),this.addMarkers(opt_markers,!0),this.setMap(map)}ClusterIcon.prototype.onAdd=function(){var cMouseDownInCluster,cDraggingMapByCluster,cClusterIcon=this;this.div_=document.createElement(\\\"div\\\"),this.div_.className=this.className_,this.visible_&&this.show(),this.getPanes().overlayMouseTarget.appendChild(this.div_),this.boundsChangedListener_=google.maps.event.addListener(this.getMap(),\\\"bounds_changed\\\",function(){cDraggingMapByCluster=cMouseDownInCluster}),google.maps.event.addDomListener(this.div_,\\\"mousedown\\\",function(){cMouseDownInCluster=!0,cDraggingMapByCluster=!1}),google.maps.event.addDomListener(this.div_,\\\"click\\\",function(e){if(cMouseDownInCluster=!1,!cDraggingMapByCluster){var theBounds,mz,mc=cClusterIcon.cluster_.getMarkerClusterer();google.maps.event.trigger(mc,\\\"click\\\",cClusterIcon.cluster_),google.maps.event.trigger(mc,\\\"clusterclick\\\",cClusterIcon.cluster_),mc.getZoomOnClick()&&(mz=mc.getMaxZoom(),theBounds=cClusterIcon.cluster_.getBounds(),mc.getMap().fitBounds(theBounds),setTimeout(function(){mc.getMap().fitBounds(theBounds),null!==mz&&mc.getMap().getZoom()>mz&&mc.getMap().setZoom(mz+1)},100)),e.cancelBubble=!0,e.stopPropagation&&e.stopPropagation()}}),google.maps.event.addDomListener(this.div_,\\\"mouseover\\\",function(){var mc=cClusterIcon.cluster_.getMarkerClusterer();google.maps.event.trigger(mc,\\\"mouseover\\\",cClusterIcon.cluster_)}),google.maps.event.addDomListener(this.div_,\\\"mouseout\\\",function(){var mc=cClusterIcon.cluster_.getMarkerClusterer();google.maps.event.trigger(mc,\\\"mouseout\\\",cClusterIcon.cluster_)})},ClusterIcon.prototype.onRemove=function(){this.div_&&this.div_.parentNode&&(this.hide(),google.maps.event.removeListener(this.boundsChangedListener_),google.maps.event.clearInstanceListeners(this.div_),this.div_.parentNode.removeChild(this.div_),this.div_=null)},ClusterIcon.prototype.draw=function(){if(this.visible_){var pos=this.getPosFromLatLng_(this.center_);this.div_.style.top=pos.y+\\\"px\\\",this.div_.style.left=pos.x+\\\"px\\\"}},ClusterIcon.prototype.hide=function(){this.div_&&(this.div_.style.display=\\\"none\\\"),this.visible_=!1},ClusterIcon.prototype.show=function(){if(this.div_){var img=\\\"\\\",bp=this.backgroundPosition_.split(\\\" \\\"),spriteH=parseInt(bp[0].trim(),10),spriteV=parseInt(bp[1].trim(),10),pos=this.getPosFromLatLng_(this.center_);this.div_.style.cssText=this.createCss(pos),img=\\\"<img src='\\\"+this.url_+\\\"' style='position: absolute; top: \\\"+spriteV+\\\"px; left: \\\"+spriteH+\\\"px; \\\",img+=this.cluster_.getMarkerClusterer().enableRetinaIcons_?\\\"width: \\\"+this.width_+\\\"px;height: \\\"+this.height_+\\\"px;\\\":\\\"clip: rect(\\\"+-1*spriteV+\\\"px, \\\"+(-1*spriteH+this.width_)+\\\"px, \\\"+(-1*spriteV+this.height_)+\\\"px, \\\"+-1*spriteH+\\\"px);\\\",img+=\\\"'>\\\",this.div_.innerHTML=img+\\\"<div style='position: absolute;top: \\\"+this.anchorText_[0]+\\\"px;left: \\\"+this.anchorText_[1]+\\\"px;color: \\\"+this.textColor_+\\\";font-size: \\\"+this.textSize_+\\\"px;font-family: \\\"+this.fontFamily_+\\\";font-weight: \\\"+this.fontWeight_+\\\";font-style: \\\"+this.fontStyle_+\\\";text-decoration: \\\"+this.textDecoration_+\\\";text-align: center;width: \\\"+this.width_+\\\"px;line-height:\\\"+this.height_+\\\"px;'>\\\"+(this.cluster_.hideLabel_?\\\" \\\":this.sums_.text)+\\\"</div>\\\",this.div_.title=\\\"undefined\\\"==typeof this.sums_.title||\\\"\\\"===this.sums_.title?this.cluster_.getMarkerClusterer().getTitle():this.sums_.title,this.div_.style.display=\\\"\\\"}this.visible_=!0},ClusterIcon.prototype.useStyle=function(sums){this.sums_=sums;var index=Math.max(0,sums.index-1);index=Math.min(this.styles_.length-1,index);var style=this.styles_[index];this.url_=style.url,this.height_=style.height,this.width_=style.width,this.anchorText_=style.anchorText||[0,0],this.anchorIcon_=style.anchorIcon||[parseInt(this.height_/2,10),parseInt(this.width_/2,10)],this.textColor_=style.textColor||\\\"black\\\",this.textSize_=style.textSize||11,this.textDecoration_=style.textDecoration||\\\"none\\\",this.fontWeight_=style.fontWeight||\\\"bold\\\",this.fontStyle_=style.fontStyle||\\\"normal\\\",this.fontFamily_=style.fontFamily||\\\"Arial,sans-serif\\\",this.backgroundPosition_=style.backgroundPosition||\\\"0 0\\\"},ClusterIcon.prototype.setCenter=function(center){this.center_=center},ClusterIcon.prototype.createCss=function(pos){var style=[];return style.push(\\\"cursor: pointer;\\\"),style.push(\\\"position: absolute; top: \\\"+pos.y+\\\"px; left: \\\"+pos.x+\\\"px;\\\"),style.push(\\\"width: \\\"+this.width_+\\\"px; height: \\\"+this.height_+\\\"px;\\\"),style.join(\\\"\\\")},ClusterIcon.prototype.getPosFromLatLng_=function(latlng){var pos=this.getProjection().fromLatLngToDivPixel(latlng);return pos.x-=this.anchorIcon_[1],pos.y-=this.anchorIcon_[0],pos.x=parseInt(pos.x,10),pos.y=parseInt(pos.y,10),pos},Cluster.prototype.getSize=function(){return this.markers_.length},Cluster.prototype.getMarkers=function(){return this.markers_},Cluster.prototype.getCenter=function(){return this.center_},Cluster.prototype.getMap=function(){return this.map_},Cluster.prototype.getMarkerClusterer=function(){return this.markerClusterer_},Cluster.prototype.getBounds=function(){var i,bounds=new google.maps.LatLngBounds(this.center_,this.center_),markers=this.getMarkers();for(i=0;i<markers.length;i++)bounds.extend(markers[i].getPosition());return bounds},Cluster.prototype.remove=function(){this.clusterIcon_.setMap(null),this.markers_=[],delete this.markers_},Cluster.prototype.addMarker=function(marker){var i,mCount,mz;if(this.isMarkerAlreadyAdded_(marker))return!1;if(this.center_){if(this.averageCenter_){var l=this.markers_.length+1,lat=(this.center_.lat()*(l-1)+marker.getPosition().lat())/l,lng=(this.center_.lng()*(l-1)+marker.getPosition().lng())/l;this.center_=new google.maps.LatLng(lat,lng),this.calculateBounds_()}}else this.center_=marker.getPosition(),this.calculateBounds_();if(marker.isAdded=!0,this.markers_.push(marker),mCount=this.markers_.length,mz=this.markerClusterer_.getMaxZoom(),null!==mz&&this.map_.getZoom()>mz)marker.getMap()!==this.map_&&marker.setMap(this.map_);else if(mCount<this.minClusterSize_)marker.getMap()!==this.map_&&marker.setMap(this.map_);else if(mCount===this.minClusterSize_)for(i=0;mCount>i;i++)this.markers_[i].setMap(null);else marker.setMap(null);return!0},Cluster.prototype.isMarkerInClusterBounds=function(marker){return this.bounds_.contains(marker.getPosition())},Cluster.prototype.calculateBounds_=function(){var bounds=new google.maps.LatLngBounds(this.center_,this.center_);this.bounds_=this.markerClusterer_.getExtendedBounds(bounds)},Cluster.prototype.updateIcon_=function(){var mCount=this.markers_.length,mz=this.markerClusterer_.getMaxZoom();if(null!==mz&&this.map_.getZoom()>mz)return void this.clusterIcon_.hide();if(mCount<this.minClusterSize_)return void this.clusterIcon_.hide();var numStyles=this.markerClusterer_.getStyles().length,sums=this.markerClusterer_.getCalculator()(this.markers_,numStyles);this.clusterIcon_.setCenter(this.center_),this.clusterIcon_.useStyle(sums),this.clusterIcon_.show()},Cluster.prototype.isMarkerAlreadyAdded_=function(marker){for(var i=0,n=this.markers_.length;n>i;i++)if(marker===this.markers_[i])return!0;return!1},MarkerClusterer.prototype.onAdd=function(){var cMarkerClusterer=this;this.activeMap_=this.getMap(),this.ready_=!0,this.repaint(),this.listeners_=[google.maps.event.addListener(this.getMap(),\\\"zoom_changed\\\",function(){cMarkerClusterer.resetViewport_(!1),(this.getZoom()===(this.get(\\\"minZoom\\\")||0)||this.getZoom()===this.get(\\\"maxZoom\\\"))&&google.maps.event.trigger(this,\\\"idle\\\")}),google.maps.event.addListener(this.getMap(),\\\"idle\\\",function(){cMarkerClusterer.redraw_()})]},MarkerClusterer.prototype.onRemove=function(){var i;for(i=0;i<this.markers_.length;i++)this.markers_[i].getMap()!==this.activeMap_&&this.markers_[i].setMap(this.activeMap_);for(i=0;i<this.clusters_.length;i++)this.clusters_[i].remove();for(this.clusters_=[],i=0;i<this.listeners_.length;i++)google.maps.event.removeListener(this.listeners_[i]);this.listeners_=[],this.activeMap_=null,this.ready_=!1},MarkerClusterer.prototype.draw=function(){},MarkerClusterer.prototype.setupStyles_=function(){var i,size;if(!(this.styles_.length>0))for(i=0;i<this.imageSizes_.length;i++)size=this.imageSizes_[i],this.styles_.push({url:this.imagePath_+(i+1)+\\\".\\\"+this.imageExtension_,height:size,width:size})},MarkerClusterer.prototype.fitMapToMarkers=function(){var i,markers=this.getMarkers(),bounds=new google.maps.LatLngBounds;for(i=0;i<markers.length;i++)bounds.extend(markers[i].getPosition());this.getMap().fitBounds(bounds)},MarkerClusterer.prototype.getGridSize=function(){return this.gridSize_},MarkerClusterer.prototype.setGridSize=function(gridSize){this.gridSize_=gridSize},MarkerClusterer.prototype.getMinimumClusterSize=function(){return this.minClusterSize_},MarkerClusterer.prototype.setMinimumClusterSize=function(minimumClusterSize){this.minClusterSize_=minimumClusterSize},MarkerClusterer.prototype.getMaxZoom=function(){return this.maxZoom_},MarkerClusterer.prototype.setMaxZoom=function(maxZoom){this.maxZoom_=maxZoom},MarkerClusterer.prototype.getStyles=function(){return this.styles_},MarkerClusterer.prototype.setStyles=function(styles){this.styles_=styles},MarkerClusterer.prototype.getTitle=function(){return this.title_},MarkerClusterer.prototype.setTitle=function(title){this.title_=title},MarkerClusterer.prototype.getZoomOnClick=function(){return this.zoomOnClick_},MarkerClusterer.prototype.setZoomOnClick=function(zoomOnClick){this.zoomOnClick_=zoomOnClick},MarkerClusterer.prototype.getAverageCenter=function(){return this.averageCenter_},MarkerClusterer.prototype.setAverageCenter=function(averageCenter){this.averageCenter_=averageCenter},MarkerClusterer.prototype.getIgnoreHidden=function(){return this.ignoreHidden_},MarkerClusterer.prototype.setIgnoreHidden=function(ignoreHidden){this.ignoreHidden_=ignoreHidden},MarkerClusterer.prototype.getEnableRetinaIcons=function(){return this.enableRetinaIcons_},MarkerClusterer.prototype.setEnableRetinaIcons=function(enableRetinaIcons){this.enableRetinaIcons_=enableRetinaIcons},MarkerClusterer.prototype.getImageExtension=function(){return this.imageExtension_},MarkerClusterer.prototype.setImageExtension=function(imageExtension){this.imageExtension_=imageExtension},MarkerClusterer.prototype.getImagePath=function(){return this.imagePath_},MarkerClusterer.prototype.setImagePath=function(imagePath){this.imagePath_=imagePath},MarkerClusterer.prototype.getImageSizes=function(){return this.imageSizes_},MarkerClusterer.prototype.setImageSizes=function(imageSizes){this.imageSizes_=imageSizes},MarkerClusterer.prototype.getCalculator=function(){return this.calculator_},MarkerClusterer.prototype.setCalculator=function(calculator){this.calculator_=calculator},MarkerClusterer.prototype.setHideLabel=function(hideLabel){this.hideLabel_=hideLabel},MarkerClusterer.prototype.getHideLabel=function(){return this.hideLabel_},MarkerClusterer.prototype.getBatchSizeIE=function(){return this.batchSizeIE_},MarkerClusterer.prototype.setBatchSizeIE=function(batchSizeIE){this.batchSizeIE_=batchSizeIE},MarkerClusterer.prototype.getClusterClass=function(){return this.clusterClass_},MarkerClusterer.prototype.setClusterClass=function(clusterClass){this.clusterClass_=clusterClass},MarkerClusterer.prototype.getMarkers=function(){return this.markers_},MarkerClusterer.prototype.getTotalMarkers=function(){return this.markers_.length},MarkerClusterer.prototype.getClusters=function(){return this.clusters_},MarkerClusterer.prototype.getTotalClusters=function(){return this.clusters_.length},MarkerClusterer.prototype.addMarker=function(marker,opt_nodraw){this.pushMarkerTo_(marker),opt_nodraw||this.redraw_()},MarkerClusterer.prototype.addMarkers=function(markers,opt_nodraw){var key;for(key in markers)markers.hasOwnProperty(key)&&this.pushMarkerTo_(markers[key]);opt_nodraw||this.redraw_()},MarkerClusterer.prototype.pushMarkerTo_=function(marker){if(marker.getDraggable()){var cMarkerClusterer=this;google.maps.event.addListener(marker,\\\"dragend\\\",function(){cMarkerClusterer.ready_&&(this.isAdded=!1,cMarkerClusterer.repaint())})}marker.isAdded=!1,this.markers_.push(marker)},MarkerClusterer.prototype.removeMarker=function(marker,opt_nodraw,opt_noMapRemove){var removeFromMap=!0&&!opt_noMapRemove,removed=this.removeMarker_(marker,removeFromMap);return!opt_nodraw&&removed&&this.repaint(),removed},MarkerClusterer.prototype.removeMarkers=function(markers,opt_nodraw,opt_noMapRemove){var i,r,removed=!1,removeFromMap=!0&&!opt_noMapRemove;for(i=0;i<markers.length;i++)r=this.removeMarker_(markers[i],removeFromMap),removed=removed||r;return!opt_nodraw&&removed&&this.repaint(),removed},MarkerClusterer.prototype.removeMarker_=function(marker,removeFromMap){var i,index=-1;if(this.markers_.indexOf)index=this.markers_.indexOf(marker);else for(i=0;i<this.markers_.length;i++)if(marker===this.markers_[i]){index=i;break}return-1===index?!1:(removeFromMap&&marker.setMap(null),this.markers_.splice(index,1),!0)},MarkerClusterer.prototype.clearMarkers=function(){this.resetViewport_(!0),this.markers_=[]},MarkerClusterer.prototype.repaint=function(){var oldClusters=this.clusters_.slice();this.clusters_=[],this.resetViewport_(!1),this.redraw_(),setTimeout(function(){var i;for(i=0;i<oldClusters.length;i++)oldClusters[i].remove()},0)},MarkerClusterer.prototype.getExtendedBounds=function(bounds){var projection=this.getProjection(),tr=new google.maps.LatLng(bounds.getNorthEast().lat(),bounds.getNorthEast().lng()),bl=new google.maps.LatLng(bounds.getSouthWest().lat(),bounds.getSouthWest().lng()),trPix=projection.fromLatLngToDivPixel(tr);trPix.x+=this.gridSize_,trPix.y-=this.gridSize_;var blPix=projection.fromLatLngToDivPixel(bl);blPix.x-=this.gridSize_,blPix.y+=this.gridSize_;var ne=projection.fromDivPixelToLatLng(trPix),sw=projection.fromDivPixelToLatLng(blPix);return bounds.extend(ne),bounds.extend(sw),bounds},MarkerClusterer.prototype.redraw_=function(){this.createClusters_(0)},MarkerClusterer.prototype.resetViewport_=function(opt_hide){var i,marker;for(i=0;i<this.clusters_.length;i++)this.clusters_[i].remove();for(this.clusters_=[],i=0;i<this.markers_.length;i++)marker=this.markers_[i],marker.isAdded=!1,opt_hide&&marker.setMap(null)},MarkerClusterer.prototype.distanceBetweenPoints_=function(p1,p2){var R=6371,dLat=(p2.lat()-p1.lat())*Math.PI/180,dLon=(p2.lng()-p1.lng())*Math.PI/180,a=Math.sin(dLat/2)*Math.sin(dLat/2)+Math.cos(p1.lat()*Math.PI/180)*Math.cos(p2.lat()*Math.PI/180)*Math.sin(dLon/2)*Math.sin(dLon/2),c=2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a)),d=R*c;return d},MarkerClusterer.prototype.isMarkerInBounds_=function(marker,bounds){return bounds.contains(marker.getPosition())},MarkerClusterer.prototype.addToClosestCluster_=function(marker){var i,d,cluster,center,distance=4e4,clusterToAddTo=null;for(i=0;i<this.clusters_.length;i++)cluster=this.clusters_[i],center=cluster.getCenter(),center&&(d=this.distanceBetweenPoints_(center,marker.getPosition()),distance>d&&(distance=d,clusterToAddTo=cluster));clusterToAddTo&&clusterToAddTo.isMarkerInClusterBounds(marker)?clusterToAddTo.addMarker(marker):(cluster=new Cluster(this),cluster.addMarker(marker),this.clusters_.push(cluster))},MarkerClusterer.prototype.createClusters_=function(iFirst){var i,marker,mapBounds,cMarkerClusterer=this;if(this.ready_){0===iFirst&&(google.maps.event.trigger(this,\\\"clusteringbegin\\\",this),\\\"undefined\\\"!=typeof this.timerRefStatic&&(clearTimeout(this.timerRefStatic),delete this.timerRefStatic)),mapBounds=this.getMap().getZoom()>3?new google.maps.LatLngBounds(this.getMap().getBounds().getSouthWest(),this.getMap().getBounds().getNorthEast()):new google.maps.LatLngBounds(new google.maps.LatLng(85.02070771743472,-178.48388434375),new google.maps.LatLng(-85.08136444384544,178.00048865625));var bounds=this.getExtendedBounds(mapBounds),iLast=Math.min(iFirst+this.batchSize_,this.markers_.length);for(i=iFirst;iLast>i;i++)marker=this.markers_[i],!marker.isAdded&&this.isMarkerInBounds_(marker,bounds)&&(!this.ignoreHidden_||this.ignoreHidden_&&marker.getVisible())&&this.addToClosestCluster_(marker);if(iLast<this.markers_.length)this.timerRefStatic=setTimeout(function(){cMarkerClusterer.createClusters_(iLast)},0);else for(delete this.timerRefStatic,google.maps.event.trigger(this,\\\"clusteringend\\\",this),i=0;i<this.clusters_.length;i++)this.clusters_[i].updateIcon_()}},MarkerClusterer.prototype.extend=function(obj1,obj2){return function(object){var property;for(property in object.prototype)this.prototype[property]=object.prototype[property];return this}.apply(obj1,[obj2])},MarkerClusterer.CALCULATOR=function(markers,numStyles){for(var index=0,title=\\\"\\\",count=markers.length.toString(),dv=count;0!==dv;)dv=parseInt(dv/10,10),index++;return index=Math.min(index,numStyles),{text:count,index:index,title:title}},MarkerClusterer.BATCH_SIZE=2e3,MarkerClusterer.BATCH_SIZE_IE=500,MarkerClusterer.IMAGE_PATH=\\\"//cdn.rawgit.com/mahnunchik/markerclustererplus/master/images/m\\\",MarkerClusterer.IMAGE_EXTENSION=\\\"png\\\",MarkerClusterer.IMAGE_SIZES=[53,56,66,78,90],\\\"function\\\"!=typeof String.prototype.trim&&(String.prototype.trim=function(){return this.replace(/^\\\\s+|\\\\s+$/g,\\\"\\\")});\"\n\n/***/ },\n\n/***/ 256:\n/***/ function(module, exports) {\n\n\tmodule.exports = MarkerClusterer;\n\n/***/ }\n\n});\n\n\n/** WEBPACK FOOTER **\n ** googlemaps.chunk.js\n **/","module.exports = google.maps;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"google.maps\"\n ** module id = 35\n ** module chunks = 2\n **/","/**\r\n * Created by Glenn on 2015-06-19.\r\n */\r\n\r\nimport maps from 'googlemaps';\r\nimport { project as mapsProject } from '../../project';\r\nimport { Viewer as AbstractViewer } from '../viewer';\r\nimport { Layer as GoogleMapsLayer } from './layer';\r\nimport { ClusteringLayer as GoogleMapsClusteringLayer } from './clustering-layer';\r\nimport { MapObject as GoogleMapsMapObject } from './map-object';\r\nimport { RoutingEngine as GoogleMapsRoutingEngine } from './routing-engine';\r\n\r\nconst google = { maps };\r\n\r\nconst defaultBoundingBox = mapsProject.bbox;\r\n\r\n/**\r\n *\r\n * @extends {Viewer}\r\n */\r\nconst GoogleMapsViewer = stampit()\r\n  .init(({ instance }) => {\r\n    const { container } = instance;\r\n\r\n    /* region private properties */\r\n\r\n    /*\r\n     *\r\n     */\r\n    let map;\r\n\r\n    /*\r\n     *\r\n     */\r\n    const eventTypes = {\r\n      click           : 'click',\r\n      dragstart       : 'dragstart',\r\n      drag            : 'drag',\r\n      dragend         : 'dragend',\r\n      mousedown       : 'click',\r\n      mouseup         : 'click',\r\n      mouseenter      : 'mouseover',\r\n      mouseleave      : 'mouseout',\r\n      mousemove       : 'mousemove',\r\n      mapviewchange   : 'bounds_changed',\r\n      mapviewchangeend: 'idle',\r\n    };\r\n\r\n    /*\r\n     *\r\n     */\r\n    let overlay;\r\n    let canvasProjection;\r\n\r\n    /* endregion private properties */\r\n\r\n    /* region privileged methods */\r\n\r\n    _.assign(instance, {\r\n\r\n      /**\r\n       * To be used necessarily with caution:\r\n       * Force this object to give up its secret (`map` object),\r\n       * since it is used in `.setMap()` method in Google Maps.\r\n       * @returns {*}\r\n       */\r\n      getNativeObject() {\r\n        return map;\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @param type\r\n       * @param listener\r\n       */\r\n      addEventListener(type, listener) {\r\n        const eventType = eventTypes[type];\r\n\r\n        if (!_.isString(eventType)) {\r\n          throw new Error(`Invalid event type: ${type}.`);\r\n        }\r\n\r\n        listener.mapsEventListener =\r\n          google.maps.event.addListener(map, eventType, listener);\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @param type\r\n       * @param listener\r\n       */\r\n      removeEventListener(type, listener) {\r\n        const eventType = eventTypes[type];\r\n\r\n        if (!_.isString(eventType)) {\r\n          throw new Error(`Invalid event type: ${type}.`);\r\n        }\r\n\r\n        google.maps.event.removeListener(listener.mapsEventListener);\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @param type\r\n       * @param listener\r\n       */\r\n      onceEventListener(type, listener) {\r\n        const eventType = eventTypes[type];\r\n\r\n        if (!_.isString(eventType)) {\r\n          throw new Error(`Invalid event type: ${type}.`);\r\n        }\r\n\r\n        listener.mapsEventListener =\r\n          google.maps.event.addListenerOnce(map, eventType, listener);\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @param overlay\r\n       */\r\n      addOverlay(overlay) {\r\n        overlay.getNativeObject().setMap(map);\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @param mapObjects\r\n       */\r\n      addObjects(mapObjects) {\r\n\r\n        _.forEach(mapObjects, mapObject => mapObject.getNativeObject().setMap(map));\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @param mapObjects\r\n       */\r\n      removeObjects(mapObjects) {\r\n\r\n        _.forEach(mapObjects, (mapObject) => {\r\n          const nativeObject = mapObject.getNativeObject();\r\n\r\n          /*\r\n           * Clean up listeners; prevent memory leak.\r\n           */\r\n          const editModeClickListener = nativeObject.get('editModeClickListener');\r\n\r\n          if (editModeClickListener) {\r\n            instance.removeEventListener('click', editModeClickListener);\r\n          }\r\n\r\n          google.maps.event.clearInstanceListeners(nativeObject);\r\n          nativeObject.setMap(undefined);\r\n        });\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @returns {*}\r\n       */\r\n      getLayerFactory() {\r\n        return GoogleMapsLayer;\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @returns {*}\r\n       */\r\n      getClusteringLayerFactory() {\r\n        return GoogleMapsClusteringLayer;\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @returns {*}\r\n       */\r\n      getMapObjectFactory() {\r\n        return GoogleMapsMapObject;\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @returns {*}\r\n       */\r\n      getRoutingEngineFactory() {\r\n        return GoogleMapsRoutingEngine;\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @param pixel\r\n       * @returns {*}\r\n       */\r\n      pixelToGeo(pixel) {\r\n        return canvasProjection.fromContainerPixelToLatLng(\r\n          new google.maps.Point(pixel.x, pixel.y));\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @param geo\r\n       */\r\n      geoToPixel(geo) {\r\n        return canvasProjection.fromLatLngToContainerPixel(\r\n          new google.maps.LatLng(geo.lat, geo.lng));\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @returns {Object} bbox\r\n       */\r\n      getBoundingBox() {\r\n        const bounds = map.getBounds();\r\n        const ne     = bounds.getNorthEast();\r\n        const sw     = bounds.getSouthWest();\r\n\r\n        return {\r\n          left           : ne.lng(),\r\n          bottom         : sw.lat(),\r\n          right          : sw.lng(),\r\n          top            : ne.lat(),\r\n          getNativeBounds: _.constant(bounds),\r\n        };\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @param {Object} bbox\r\n       */\r\n      setBoundingBox(bbox) {\r\n\r\n        if (bbox) {\r\n          const { bottom, right, top, left } = bbox;\r\n          const bounds = new google.maps.LatLngBounds(\r\n            new google.maps.LatLng(bottom, right),\r\n            new google.maps.LatLng(top, left)\r\n          );\r\n\r\n          map.fitBounds(bounds);\r\n        }\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @returns {{lat: *, lng: *}}\r\n       */\r\n      getCenter() {\r\n        const center = map.getCenter();\r\n\r\n        return {\r\n          lat: center.lat(),\r\n          lng: center.lng(),\r\n        };\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @param center\r\n       */\r\n      setCenter(center) {\r\n        map.setCenter(center);\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @returns {*}\r\n       */\r\n      getZoom() {\r\n        return map.getZoom();\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @param zoom\r\n       */\r\n      zoomToLevel(zoom) {\r\n\r\n        if (zoom >= 0) {\r\n          map.setZoom(zoom);\r\n        }\r\n      },\r\n\r\n      /**\r\n       *\r\n       */\r\n      refresh() {\r\n        google.maps.event.trigger(map, 'idle');\r\n      },\r\n\r\n      /**\r\n       *\r\n       */\r\n      resize() {\r\n        google.maps.event.trigger(map, 'resize');\r\n      },\r\n\r\n      /**\r\n       *\r\n       */\r\n      shake() {\r\n        instance.refresh();\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @returns {*}\r\n       */\r\n      resolveProjection() {\r\n        return defer.promise();\r\n      },\r\n    });\r\n\r\n    /* endregion privileged methods */\r\n\r\n    /* region init code */\r\n\r\n    /* region Google Maps initialization */\r\n\r\n    // Initialize the platform object.\r\n    map = new google.maps.Map(container[0]);\r\n\r\n    /**\r\n     * Reposition default native map controls so that they don't\r\n     * collide with the DRS extension positioning: since 3.22.\r\n     * @see https://developers.google.com/maps/articles/v322-controls-diff\r\n     */\r\n    const { RIGHT_CENTER } = google.maps.ControlPosition;\r\n    const { ROADMAP, SATELLITE } = google.maps.MapTypeId;\r\n    map.setOptions({\r\n      mapTypeId               : App.config.map.defaultMapTypeSatelliteEnabled ?\r\n                                SATELLITE : ROADMAP,\r\n      streetViewControlOptions: {\r\n        position: RIGHT_CENTER,\r\n      },\r\n      zoomControlOptions      : {\r\n        position: RIGHT_CENTER,\r\n      },\r\n    });\r\n\r\n    /*\r\n     * Setup default event listeners:\r\n     * - add event listeners related to map info box positioning,\r\n     * - add event listeners to map \"extensions\".\r\n     */\r\n    instance.addEventListener('click', instance.createDefaultClickListener());\r\n    instance.addEventListener('mapviewchangeend', instance.createDefaultMapViewChangeEndListener());\r\n    instance.addEventListener('mousemove', instance.createDefaultMouseMoveListener());\r\n\r\n    /**\r\n     * Get the proper projection of the map viewer. Uuuuugeleeeeey!\r\n     * @see http://qfox.nl/notes/116\r\n     * @type {google.maps.OverlayView}\r\n     */\r\n    overlay = new google.maps.OverlayView();\r\n    const defer = $.Deferred();\r\n    _.assign(overlay, {\r\n      onAdd() {\r\n\r\n        /**\r\n         * The projection is not initialized until onAdd is\r\n         * called by the API.\r\n         * @see https://developers.google.com/maps/documentation/javascript/3.exp/reference#OverlayView\r\n         */\r\n        canvasProjection = overlay.getProjection();\r\n        defer.resolve();\r\n      },\r\n\r\n      onRemove: _.noop,\r\n      draw    : _.noop,\r\n    }).setMap(map);\r\n\r\n    /* endregion Google Maps initialization */\r\n\r\n    instance.setBoundingBox(defaultBoundingBox);\r\n\r\n    /* endregion init code */\r\n  });\r\n\r\nconst Viewer = stampit.compose(AbstractViewer, GoogleMapsViewer);\r\n\r\nexport { Viewer as default, Viewer };\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./js/maps/viewers/googlemaps/viewer.js\n **/","/**\r\n * Created by Glenn on 2015-07-30.\r\n */\r\n\r\nimport maps from 'googlemaps';\r\nimport MarkerClusterer from 'marker-clusterer';\r\nimport { Layer as AbstractLayer } from '../layer';\r\nimport { Styler } from '../../styler';\r\n\r\nconst google = { maps };\r\n\r\nconst styler = Styler.getInstance();\r\n\r\n/**\r\n *\r\n * @extends {Layer}\r\n */\r\nconst GoogleMapsClusteringLayer = stampit()\r\n  .init(({ instance }) => {\r\n    const { viewer } = instance;\r\n\r\n    /* region private properties */\r\n\r\n    /*\r\n     *\r\n     */\r\n    let markerClusterer;\r\n\r\n    /*\r\n     *\r\n     */\r\n    let data = {};\r\n\r\n    /*\r\n     *\r\n     */\r\n    let mapObjectList = {};\r\n\r\n    /*\r\n     *\r\n     */\r\n    const defaultClusteringOptions = {\r\n      gridSize          : 60,\r\n      maxZoom           : Infinity,\r\n      zoomOnClick       : true,\r\n      averageCenter     : false,\r\n      minimumClusterSize: 3,\r\n      ignoreHidden      : true,\r\n      imagePath         : `${styler.getClusterIconsDir()}m`,\r\n    };\r\n\r\n    /*\r\n     *\r\n     */\r\n    let clusteringDefer = $.Deferred();\r\n\r\n    /* endregion private properties */\r\n\r\n    /* region privileged methods */\r\n\r\n    _.assign(instance, {\r\n\r\n      /**\r\n       *\r\n       * @returns {*}\r\n       */\r\n      getNativeObject() {\r\n        return markerClusterer;\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @param key\r\n       * @returns {*}\r\n       */\r\n      getData(key) {\r\n        return data[key];\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @param key\r\n       * @param value\r\n       */\r\n      setData(key, value) {\r\n\r\n        if (_.isPlainObject(key)) {\r\n          _.assign(data, key);\r\n        } else {\r\n          data[key] = value;\r\n        }\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @returns {boolean}\r\n       */\r\n      isVisible() {\r\n        return Boolean(instance.getData('visible'));\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @param visible\r\n       */\r\n      setVisible(visible) {\r\n        instance.setData('visible', visible);\r\n\r\n        const map = visible ? viewer.getNativeObject() : undefined;\r\n\r\n        /*\r\n         * `markerClusterer.setMap(null)` unclusters the clusters\r\n         * instead of setting the OverlayView's map to `null`.\r\n         * And, with that, comes this below awkward line.\r\n         */\r\n        markerClusterer.activeMap_ = map;\r\n        markerClusterer.setMap(map);\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @returns {*}\r\n       */\r\n      getObjects() {\r\n        return _(mapObjectList)\r\n          .map()\r\n          .compact()\r\n          .value();\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @param mapObjects\r\n       */\r\n      add(mapObjects) {\r\n\r\n        const markers = _.map(mapObjects, (mapObject) => {\r\n          mapObjectList[mapObject.id] = mapObject;\r\n\r\n          return mapObject.getNativeObject();\r\n        });\r\n\r\n        markerClusterer.addMarkers(markers);\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @param mapObjects\r\n       */\r\n      remove(mapObjects) {\r\n\r\n        const markers = _.map(mapObjects, (mapObject) => {\r\n          delete mapObjectList[mapObject.id];\r\n\r\n          return mapObject.getNativeObject();\r\n        });\r\n\r\n        markerClusterer.removeMarkers(markers);\r\n      },\r\n\r\n      /**\r\n       *\r\n       */\r\n      clear() {\r\n        mapObjectList = {};\r\n\r\n        markerClusterer.clearMarkers();\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @returns {{top: (*|Number), right: (*|Number), bottom: (*|Number), left: (*|Number)}}\r\n       */\r\n      getBounds() {\r\n        const markers = markerClusterer.getMarkers();\r\n        let bbox;\r\n\r\n        if (markers.length > 0) {\r\n          const bounds = new google.maps.LatLngBounds();\r\n\r\n          _.forEach(markers, marker => bounds.extend(marker.getPosition()));\r\n\r\n          const ne = bounds.getNorthEast();\r\n          const sw = bounds.getSouthWest();\r\n\r\n          bbox = {\r\n            left  : ne.lng(),\r\n            bottom: sw.lat(),\r\n            right : sw.lng(),\r\n            top   : ne.lat(),\r\n          };\r\n        }\r\n\r\n        return bbox;\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @returns {boolean}\r\n       */\r\n      isClusteringSupported() {\r\n        return true;\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @param [clusteringOptions]\r\n       */\r\n      performClustering(clusteringOptions) {\r\n        clusteringDefer = $.Deferred();\r\n\r\n        let markers = [];\r\n\r\n        if (markerClusterer) {\r\n          markers = markerClusterer.getMarkers();\r\n          markerClusterer.clearMarkers();\r\n        }\r\n\r\n        const clusteringEnabled = instance.isClusteringEnabled();\r\n        const mcOptions         = _.merge(\r\n          {},\r\n          defaultClusteringOptions,\r\n          { minimumClusterSize: clusteringEnabled ? undefined : Infinity },\r\n          clusteringOptions\r\n        );\r\n\r\n        instance.setData('clustered',\r\n          _.isFinite(mcOptions.minimumClusterSize));\r\n\r\n        markerClusterer = new MarkerClusterer(\r\n          viewer.getNativeObject(), markers, mcOptions);\r\n\r\n        google.maps.event.addListenerOnce(\r\n          markerClusterer, 'clusteringend', () => clusteringDefer.resolve());\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @returns {*}\r\n       */\r\n      resolveClustering() {\r\n        return clusteringDefer.promise();\r\n      },\r\n    });\r\n\r\n    /* endregion privileged methods */\r\n\r\n    /* region init code */\r\n\r\n    viewer.addEventListener('mapviewchangeend', () => {\r\n\r\n      if (instance.isClusteringEnabled()) {\r\n        const clustered = instance.getData('clustered');\r\n\r\n        if (viewer.getZoom() >= 20) {\r\n\r\n          if (clustered) {\r\n            instance.performClustering({ minWeight: Infinity });\r\n          }\r\n        } else {\r\n\r\n          if (!clustered) {\r\n            instance.performClustering();\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // Enable clustering by default.\r\n    instance.setClusteringEnabled(true);\r\n\r\n    instance.setVisible(true);\r\n    instance.setData('wrapper', instance);\r\n\r\n    /* endregion init code */\r\n  });\r\n\r\nconst ClusteringLayer = stampit.compose(AbstractLayer, GoogleMapsClusteringLayer);\r\n\r\nexport { ClusteringLayer as default, ClusteringLayer };\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./js/maps/viewers/googlemaps/clustering-layer.js\n **/","/**\r\n * Created by Glenn on 2015-07-30.\r\n */\r\n\r\nimport maps from 'googlemaps';\r\nimport { Layer as AbstractLayer } from '../layer';\r\n\r\nconst google = { maps };\r\n\r\n/**\r\n *\r\n * @extends {Layer}\r\n */\r\nconst GoogleMapsLayer = stampit()\r\n  .init(({ instance }) => {\r\n    const { viewer } = instance;\r\n\r\n    /* region private properties */\r\n\r\n    /**\r\n     * Layer implementation in Google Maps is actually, well,\r\n     * an \"OverlayView\".\r\n     * @type {google.maps.OverlayView}\r\n     */\r\n    const overlay = new google.maps.OverlayView();\r\n\r\n    /*\r\n     *\r\n     */\r\n    let mapObjectList = {};\r\n\r\n    /* endregion private properties */\r\n\r\n    /* region privileged methods */\r\n\r\n    _.assign(instance, {\r\n\r\n      /**\r\n       *\r\n       * @returns {google.maps.OverlayView}\r\n       */\r\n      getNativeObject() {\r\n        return overlay;\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @param key\r\n       * @returns {*}\r\n       */\r\n      getData(key) {\r\n        return overlay.get(key);\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @param key\r\n       * @param value\r\n       */\r\n      setData(key, value) {\r\n\r\n        if (_.isPlainObject(key)) {\r\n          overlay.setValues(key);\r\n        } else {\r\n          overlay.set(key, value);\r\n        }\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @returns {boolean}\r\n       */\r\n      isVisible() {\r\n        return Boolean(overlay.getMap());\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @param visible\r\n       */\r\n      setVisible(visible) {\r\n        const map = visible ? viewer.getNativeObject() : undefined;\r\n\r\n        overlay.setMap(map);\r\n\r\n        _.forOwn(mapObjectList, mapObject => mapObject.getNativeObject().setMap(map));\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @returns {*}\r\n       */\r\n      getObjects() {\r\n        return _(mapObjectList)\r\n          .map()\r\n          .compact()\r\n          .value();\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @param mapObjects\r\n       */\r\n      add(mapObjects) {\r\n        mapObjects = _.isArray(mapObjects) ? mapObjects : [mapObjects];\r\n\r\n        _.forEach(mapObjects, (mapObject) => {\r\n          mapObjectList[mapObject.id] = mapObject;\r\n\r\n          mapObject\r\n            .getNativeObject()\r\n            .setMap(viewer.getNativeObject());\r\n        });\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @param mapObjects\r\n       */\r\n      remove(mapObjects) {\r\n        mapObjects = _.isArray(mapObjects) ? mapObjects : [mapObjects];\r\n\r\n        _.forEach(mapObjects, (mapObject) => {\r\n          delete mapObjectList[mapObject.id];\r\n\r\n          const nativeObject = mapObject.getNativeObject();\r\n\r\n          nativeObject.setMap(undefined);\r\n\r\n          // Prevent memory leak.\r\n          google.maps.event.clearInstanceListeners(nativeObject);\r\n        });\r\n      },\r\n\r\n      /**\r\n       *\r\n       */\r\n      clear() {\r\n        instance.remove(\r\n          _(mapObjectList)\r\n            .map()\r\n            .compact()\r\n            .value());\r\n\r\n        mapObjectList = {};\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @returns {*}\r\n       */\r\n      getBounds() {\r\n        const mapObjects = instance.getObjects();\r\n        let bbox;\r\n\r\n        if (mapObjects.length > 0) {\r\n          const nativeObject = mapObjects[0].getNativeObject();\r\n          const bounds       = new google.maps.LatLngBounds();\r\n\r\n          // Bounds calculation for position or location layer.\r\n          if (nativeObject instanceof google.maps.Marker) {\r\n\r\n            _.forEach(mapObjects, mapObject =>\r\n              bounds.extend(mapObject.getNativeObject().getPosition()));\r\n\r\n          } else { // For geofence layer.\r\n\r\n            _.forEach(mapObjects, (mapObject) => {\r\n              const { bottom, right, top, left } = mapObject.getBounds();\r\n              const other = new google.maps.LatLngBounds(\r\n                new google.maps.LatLng(bottom, right),\r\n                new google.maps.LatLng(top, left)\r\n              );\r\n\r\n              bounds.union(other);\r\n            });\r\n          }\r\n\r\n          const ne = bounds.getNorthEast();\r\n          const sw = bounds.getSouthWest();\r\n\r\n          bbox = {\r\n            left  : ne.lng(),\r\n            bottom: sw.lat(),\r\n            right : sw.lng(),\r\n            top   : ne.lat(),\r\n          };\r\n        }\r\n\r\n        return bbox;\r\n      },\r\n    });\r\n\r\n    /* endregion privileged methods */\r\n\r\n    /* region init code */\r\n\r\n    _.assign(overlay, {\r\n      draw    : _.noop,\r\n      onAdd   : _.noop,\r\n      onRemove: _.noop,\r\n    }).setMap(viewer.getNativeObject());\r\n\r\n    instance.setVisible(true);\r\n    instance.setData('wrapper', instance);\r\n\r\n    /* endregion init code */\r\n  });\r\n\r\nconst Layer = stampit.compose(AbstractLayer, GoogleMapsLayer);\r\n\r\nexport { Layer as default, Layer };\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./js/maps/viewers/googlemaps/layer.js\n **/","/**\r\n * Created by Glenn on 2015-07-30.\r\n */\r\n\r\nimport maps from 'googlemaps';\r\nimport { MapObject as AbstractMapObject } from '../map-object';\r\nimport { Styler } from '../../styler';\r\n\r\nconst google = { maps };\r\n\r\nconst styler = Styler.getInstance();\r\n\r\n/**\r\n * Concrete factory for creating map object using Google Maps JS API.\r\n * The created map object will act as an adapter for the corresponding\r\n * native Google Maps map object, implementing the \"abstract\" methods\r\n * specified in the more abstract map object.\r\n * @extends {MapObject}\r\n */\r\nconst GoogleMapsMapObject = stampit()\r\n  .init(({ instance }) => {\r\n    const { roamObject, viewer } = instance;\r\n    let { objectModel } = instance;\r\n\r\n    /* region private properties */\r\n\r\n    /*\r\n     *\r\n     */\r\n    let nativeObject;\r\n\r\n    /*\r\n     *\r\n     */\r\n    const eventTypes = {\r\n      click           : 'click',\r\n      dragstart       : 'dragstart',\r\n      drag            : 'drag',\r\n      dragend         : 'dragend',\r\n      mousedown       : 'mousedown',\r\n      mouseup         : 'mouseup',\r\n      mouseenter      : 'mouseover',\r\n      mouseleave      : 'mouseout',\r\n      mousemove       : 'mousemove',\r\n      visibilitychange: 'visible_changed',\r\n      mapchange       : 'map_changed',\r\n    };\r\n\r\n    /* endregion private properties */\r\n\r\n    /* region privileged methods */\r\n\r\n    _.assign(instance, {\r\n\r\n      /**\r\n       *\r\n       * @returns {*}\r\n       */\r\n      getNativeObject() {\r\n        return nativeObject;\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @param type\r\n       * @param listener\r\n       */\r\n      addEventListener(type, listener) {\r\n        const eventType = eventTypes[type];\r\n\r\n        if (!_.isString(eventType)) {\r\n          throw new Error(`Invalid event type: ${type}.`);\r\n        }\r\n\r\n        listener.mapsEventListener =\r\n          google.maps.event.addListener(nativeObject, eventType, listener);\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @param type\r\n       * @param listener\r\n       */\r\n      removeEventListener(type, listener) {\r\n        const eventType = eventTypes[type];\r\n\r\n        if (!_.isString(eventType)) {\r\n          throw new Error(`Invalid event type: ${type}.`);\r\n        }\r\n\r\n        google.maps.event.removeListener(listener.mapsEventListener);\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @param key\r\n       * @returns {*}\r\n       */\r\n      getData(key) {\r\n        return nativeObject.get(key);\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @param key\r\n       * @param value\r\n       */\r\n      setData(key, value) {\r\n\r\n        if (_.isPlainObject(key)) {\r\n          nativeObject.setValues(key);\r\n        } else {\r\n          nativeObject.set(key, value);\r\n        }\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @param effective\r\n       * @returns {*}\r\n       */\r\n      isVisible(effective) {\r\n        let visible = nativeObject.getVisible();\r\n\r\n        if (effective) {\r\n          visible = visible && Boolean(nativeObject.getMap());\r\n        }\r\n\r\n        return visible;\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @param visible\r\n       */\r\n      setVisible(visible) {\r\n        nativeObject.setVisible(visible);\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @returns {boolean}\r\n       */\r\n      isWithinViewBounds() {\r\n        const nativeBounds   = viewer.getBoundingBox().getNativeBounds();\r\n        let withinViewBounds = false;\r\n\r\n        if (nativeObject instanceof google.maps.Marker) {\r\n          withinViewBounds = nativeBounds.contains(nativeObject.getPosition());\r\n        } else {\r\n\r\n          if (_.isFunction(nativeObject.getBounds)) {\r\n            withinViewBounds = nativeBounds.intersects(nativeObject.getBounds());\r\n          } else {\r\n            withinViewBounds = _.some(nativeObject.getPath().getArray(),\r\n              latLng => nativeBounds.contains(latLng));\r\n          }\r\n        }\r\n\r\n        return withinViewBounds;\r\n      },\r\n    });\r\n\r\n    /* endregion privileged methods */\r\n\r\n    /* region init code */\r\n\r\n    objectModel = instance.objectModel = objectModel || instance.createDefaultObjectModel();\r\n    objectModel.options = { ...objectModel.options };\r\n\r\n    /*\r\n     * Create the native Google Maps object.\r\n     */\r\n    const factoryMethod = instance.getFactoryMethod(objectModel.shapeType);\r\n    nativeObject        = factoryMethod(objectModel, viewer);\r\n\r\n    /* region setup wrapper methods */\r\n\r\n    /*\r\n     * Enrich this map object with type-specific adapter methods.\r\n     */\r\n    if (nativeObject instanceof google.maps.Marker) {\r\n\r\n      /*\r\n       * Marker.\r\n       */\r\n      _.assign(instance, {\r\n\r\n        /**\r\n         *\r\n         * @returns {*}\r\n         */\r\n        getPosition() {\r\n          const position = nativeObject.getPosition();\r\n\r\n          return {\r\n            lat: position.lat(),\r\n            lng: position.lng(),\r\n          };\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param position\r\n         */\r\n        setPosition(position) {\r\n          const { lat, lng } = position;\r\n\r\n          objectModel.coordinates = [lat, lng];\r\n\r\n          const oldPosition = nativeObject.getPosition();\r\n          const newPosition = new google.maps.LatLng(lat, lng);\r\n\r\n          if (!newPosition.equals(oldPosition)) {\r\n            nativeObject.setPosition(newPosition);\r\n          }\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @returns {*}\r\n         */\r\n        getIcon() {\r\n          return nativeObject.getIcon();\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param icon\r\n         */\r\n        setIcon(icon) {\r\n          const { model, options } = icon;\r\n          let url = model;\r\n\r\n          /*\r\n           * See the below comment in .createMarker() method.\r\n           */\r\n          if (url.match(/<svg/i)) {\r\n            url = `data:image/svg+xml;charset=UTF-8;base64,${btoa(url)}`;\r\n          }\r\n\r\n          nativeObject.setIcon({\r\n            url,\r\n            ...options,\r\n          });\r\n        },\r\n\r\n        /**\r\n         *\r\n         */\r\n        updateIcon() {\r\n          instance.setData('originalIcon', instance.getIcon());\r\n          instance.setIcon({\r\n            model: styler.getRoamIcon(\r\n              instance.roamObject, !kendo.support.browser.msie),\r\n          });\r\n\r\n          /*\r\n           * Add a nice animation's lick. =p\r\n           */\r\n          instance.bounce();\r\n        },\r\n\r\n        /**\r\n         *\r\n         */\r\n        revertIcon() {\r\n          const originalIcon = instance.getData('originalIcon');\r\n\r\n          if (originalIcon) {\r\n            instance.setIcon({\r\n              model: originalIcon.url,\r\n            });\r\n          }\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param opacity\r\n         */\r\n        setOpacity(opacity) {\r\n          nativeObject.setOpacity(opacity);\r\n        },\r\n\r\n        /**\r\n         *\r\n         */\r\n        bounce() {\r\n          const bounceDuration = 3000; // in milliseconds\r\n\r\n          nativeObject.setAnimation(google.maps.Animation.BOUNCE);\r\n          setTimeout(() => nativeObject.setAnimation(undefined), bounceDuration);\r\n        },\r\n      });\r\n\r\n    } else {\r\n\r\n      /*\r\n       * Spatial geoshape.\r\n       */\r\n      if (nativeObject instanceof google.maps.Circle) {\r\n\r\n        /*\r\n         * Circle.\r\n         */\r\n        _.assign(instance, {\r\n\r\n          /**\r\n           *\r\n           * @param center\r\n           */\r\n          setCenter(center) {\r\n            const { lat, lng } = center;\r\n\r\n            objectModel.coordinates[0] = lat;\r\n            objectModel.coordinates[1] = lng;\r\n\r\n            const oldCenter = nativeObject.getCenter();\r\n            const newCenter = new google.maps.LatLng(lat, lng);\r\n\r\n            if (!newCenter.equals(oldCenter)) {\r\n              nativeObject.setCenter(newCenter);\r\n            }\r\n          },\r\n\r\n          /**\r\n           *\r\n           * @param radius\r\n           */\r\n          setRadius(radius) {\r\n            objectModel.coordinates[2] = radius;\r\n\r\n            if (radius !== nativeObject.getRadius()) {\r\n              nativeObject.setRadius(radius);\r\n            }\r\n          },\r\n        });\r\n\r\n      } else {\r\n\r\n        /*\r\n         * - Polyline,\r\n         * - Polygon,\r\n         * - Rectangle.\r\n         */\r\n        _.assign(instance, {\r\n\r\n          /**\r\n           *\r\n           * @returns {Object} bbox\r\n           */\r\n          getBounds() {\r\n            let bounds = new google.maps.LatLngBounds();\r\n\r\n            if (_.isFunction(nativeObject.getBounds)) {\r\n              bounds = nativeObject.getBounds();\r\n            } else {\r\n              const path = nativeObject.getPath();\r\n\r\n              _.forEach(path.getArray(), latLng => bounds.extend(latLng));\r\n            }\r\n\r\n            const ne = bounds.getNorthEast();\r\n            const sw = bounds.getSouthWest();\r\n\r\n            return {\r\n              left  : ne.lng(),\r\n              bottom: sw.lat(),\r\n              right : sw.lng(),\r\n              top   : ne.lat(),\r\n            };\r\n          },\r\n\r\n          /**\r\n           *\r\n           * @returns {{lat: number, lng: number}}\r\n           */\r\n          getCenterBounds() {\r\n            const { right, left, top, bottom } = instance.getBounds();\r\n            const deltaX = (right - left) / 2;\r\n            const deltaY = (top - bottom) / 2;\r\n\r\n            return {\r\n              lat: bottom + deltaY,\r\n              lng: left + deltaX,\r\n            };\r\n          },\r\n        });\r\n\r\n        if (nativeObject instanceof google.maps.Rectangle) {\r\n\r\n          /*\r\n           * Rectangle.\r\n           */\r\n          _.assign(instance, {\r\n\r\n            /**\r\n             *\r\n             * @param bounds\r\n             */\r\n            setBounds(bounds) {\r\n              const { right, left, top, bottom } = bounds;\r\n              objectModel.coordinates = [top, left, bottom, right];\r\n\r\n              const oldBounds = nativeObject.getBounds();\r\n              const newBounds = new google.maps.LatLngBounds(\r\n                new google.maps.LatLng(bottom, right),\r\n                new google.maps.LatLng(top, left)\r\n              );\r\n\r\n              if (!newBounds.equals(oldBounds)) {\r\n                nativeObject.setBounds(newBounds);\r\n              }\r\n            },\r\n          });\r\n\r\n        } else {\r\n\r\n          /*\r\n           * - Polyline,\r\n           * - Polygon.\r\n           */\r\n          _.assign(instance, {\r\n\r\n            /**\r\n             *\r\n             * @param coordinates\r\n             */\r\n            setCoordinates(coordinates) {\r\n              objectModel.coordinates = coordinates;\r\n\r\n              const oldPath          = nativeObject.getPath();\r\n              let coordinatesChanged = true;\r\n\r\n              if (oldPath) {\r\n                const oldCoordinates = oldPath.getArray();\r\n\r\n                coordinatesChanged = _.some(coordinates,\r\n                  (coordinate, i) => (coordinate !== oldCoordinates[i]));\r\n              }\r\n\r\n              if (coordinatesChanged) {\r\n                nativeObject.setPath(\r\n                  viewer\r\n                    .getMapObjectFactory()\r\n                    .toPoints(coordinates));\r\n              }\r\n            },\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    /* endregion setup wrapper methods */\r\n\r\n    if (roamObject) {\r\n\r\n      // Setup default ROAM data.\r\n      instance.setData(instance.createDefaultRoamData());\r\n\r\n      // Setup default event listeners.\r\n      instance.addEventListener('click', instance.createDefaultClickListener());\r\n      instance.addEventListener('mouseenter', instance.createDefaultMouseEnterListener());\r\n      instance.addEventListener('mouseleave', instance.createDefaultMouseLeaveListener());\r\n\r\n      // Bind label's visibility to object's visibility.\r\n      const visibilityChangedListener = instance.createDefaultVisibilityChangedListener();\r\n      instance.addEventListener('visibilitychange', visibilityChangedListener);\r\n      instance.addEventListener('mapchange', visibilityChangedListener);\r\n    }\r\n\r\n    instance.setData('wrapper', instance);\r\n\r\n    /* endregion init code */\r\n  })\r\n  .static({\r\n\r\n    /**\r\n     *\r\n     * @param objectModel\r\n     * @param viewer\r\n     * @returns {*}\r\n     */\r\n    createMarker(objectModel, viewer) {\r\n      const { coordinates, options } = objectModel;\r\n      const { label, icon, editable, draggable } = options;\r\n      let { lat, lng } = objectModel;\r\n\r\n      if (!(_.isFinite(lat) && _.isFinite(lng))) {\r\n        [lat, lng] = coordinates;\r\n      }\r\n\r\n      const marker = new google.maps.Marker({\r\n        //animation: options.editable ? null : google.maps.Animation.BOUNCE,\r\n        //animation: options.editable ? null : google.maps.Animation.DROP,\r\n        label,\r\n        position: new google.maps.LatLng(lat, lng),\r\n      });\r\n\r\n      if (icon && icon.model) {\r\n        let url = icon.model;\r\n\r\n        /**\r\n         * Darn. Gotta do this for passing SVG DOM object as icon.\r\n         * @see https://code.google.com/p/gmaps-api-issues/issues/detail?id=6505\r\n         */\r\n        if (url.match(/svg/i)) {\r\n          url = `data:image/svg+xml;charset=UTF-8;base64,${btoa(url)}`;\r\n        }\r\n\r\n        marker.setIcon({\r\n          url,\r\n          ...options,\r\n        });\r\n      }\r\n\r\n      const editManager = viewer.getEditManager();\r\n\r\n      if (draggable) {\r\n        marker.setDraggable(true);\r\n\r\n        google.maps.event.addListener(marker, 'drag', ({ latLng }) => {\r\n          const lat         = latLng.lat();\r\n          const lng         = latLng.lng();\r\n          const coordinates = [lat, lng];\r\n\r\n          marker.get('wrapper').setPosition({\r\n            lat,\r\n            lng,\r\n          });\r\n\r\n          if (editable) {\r\n            editManager.setEditableObjectCoordinates(coordinates);\r\n          }\r\n        });\r\n      }\r\n\r\n      if (editable) {\r\n        function editModeClickListener({ latLng }) {\r\n          editManager.setEditableObjectCoordinates([latLng.lat(), latLng.lng()]);\r\n        }\r\n\r\n        marker.set('editModeClickListener', editModeClickListener);\r\n        viewer.addEventListener('click', editModeClickListener);\r\n      }\r\n\r\n      return marker;\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @param objectModel\r\n     * @param viewer\r\n     * @returns {*}\r\n     */\r\n    createPolyline(objectModel, viewer) {\r\n      const { coordinates, options } = objectModel;\r\n      const { draggable, editable, styleName } = options;\r\n      const mapObjectFactory = viewer.getMapObjectFactory();\r\n\r\n      let polyline = new google.maps.Polyline({\r\n        draggable,\r\n        path: mapObjectFactory.toPoints(coordinates),\r\n      });\r\n\r\n      if (editable) {\r\n        polyline = mapObjectFactory.toEditablePolyShape(polyline, objectModel, viewer);\r\n      }\r\n\r\n      if (styleName) {\r\n        const style = mapObjectFactory.createNormalizedShapeStyle(styleName, viewer);\r\n        const { strokeColor, strokeOpacity, strokeWeight, fillColor, fillOpacity, icons } = style;\r\n\r\n        polyline.setOptions({\r\n          strokeColor,\r\n          strokeOpacity,\r\n          strokeWeight,\r\n          fillColor,\r\n          fillOpacity,\r\n          icons,\r\n        });\r\n      }\r\n\r\n      return polyline;\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @param objectModel\r\n     * @param viewer\r\n     * @returns {*}\r\n     */\r\n    createPolygon(objectModel, viewer) {\r\n      const { coordinates, options } = objectModel;\r\n      const { draggable, editable, styleName } = options;\r\n      const mapObjectFactory = viewer.getMapObjectFactory();\r\n\r\n      let polygon = new google.maps.Polygon({\r\n        draggable,\r\n        paths: mapObjectFactory.toPoints(coordinates),\r\n      });\r\n\r\n      if (editable) {\r\n        polygon = mapObjectFactory.toEditablePolyShape(polygon, objectModel, viewer);\r\n      }\r\n\r\n      if (styleName) {\r\n        const style = mapObjectFactory.createNormalizedShapeStyle(styleName, viewer);\r\n        const { strokeColor, strokeWeight, fillColor, fillOpacity } = style;\r\n\r\n        polygon.setOptions({\r\n          strokeColor,\r\n          strokeWeight,\r\n          fillColor,\r\n          fillOpacity,\r\n        });\r\n      }\r\n\r\n      return polygon;\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @param polyShape\r\n     * @param objectModel\r\n     * @param viewer\r\n     * @returns {*}\r\n     */\r\n    toEditablePolyShape(polyShape, objectModel, viewer) {\r\n      const { coordinates } = objectModel;\r\n      const mapObjectFactory = viewer.getMapObjectFactory();\r\n      const editManager      = viewer.getEditManager();\r\n      const pointCount       = _.floor(coordinates.length / 2);\r\n\r\n      /*\r\n       * Incremental creation of a poly-* generally starts\r\n       * with a single point.\r\n       */\r\n      if (pointCount === 1) {\r\n        polyShape = mapObjectFactory.createMarker(objectModel, viewer);\r\n\r\n        /*\r\n         * Remove leftover click listener of editable marker\r\n         * object type. At this point, `polyShape` is actually\r\n         * a marker.\r\n         */\r\n        viewer.removeEventListener('click', polyShape.get('editModeClickListener'));\r\n      } else {\r\n        polyShape.setEditable(true);\r\n\r\n        /*\r\n         * Here, the polyshape is already a polyline or polygon.\r\n         */\r\n        const path = polyShape.getPath();\r\n\r\n        function editingEventListener() {\r\n          editManager.setEditableObjectCoordinates(\r\n            mapObjectFactory.toCoordinates(polyShape.getPath()));\r\n        }\r\n\r\n        google.maps.event.addListener(path, 'insert_at', editingEventListener);\r\n        google.maps.event.addListener(path, 'remove_at', editingEventListener);\r\n        google.maps.event.addListener(path, 'set_at', editingEventListener);\r\n      }\r\n\r\n      function editModeClickListener({ latLng }) {\r\n        const coordinates_ = editManager.getEditableObjectCoordinates();\r\n        let editableObject = editManager.getEditableObject();\r\n        const nativeObject = editableObject.getNativeObject();\r\n\r\n        coordinates_.push(latLng.lat(), latLng.lng());\r\n\r\n        if (nativeObject instanceof google.maps.Marker) {\r\n          const { objectModel } = editableObject;\r\n\r\n          /*\r\n           * Transform from marker to poly-* shape.\r\n           */\r\n          editableObject = mapObjectFactory.create({\r\n            viewer,\r\n            objectModel: { ...objectModel, coordinates: coordinates_ },\r\n          });\r\n\r\n          editManager.setEditableObject(editableObject);\r\n        } else {\r\n          editManager.setEditableObjectCoordinates(coordinates_);\r\n        }\r\n      }\r\n\r\n      polyShape.set('editModeClickListener', editModeClickListener);\r\n      viewer.addEventListener('click', editModeClickListener);\r\n\r\n      return polyShape;\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @param objectModel\r\n     * @param viewer\r\n     */\r\n    createRectangle(objectModel, viewer) {\r\n      const { coordinates, options } = objectModel;\r\n      const { draggable, editable, styleName } = options;\r\n      const mapObjectFactory = viewer.getMapObjectFactory();\r\n\r\n      const points = mapObjectFactory.toPoints(coordinates);\r\n      const [point1, point2] = points;\r\n      const bounds = new google.maps.LatLngBounds(\r\n        new google.maps.LatLng(point1.lat, point1.lng));\r\n\r\n      if (point2) {\r\n        bounds.extend(new google.maps.LatLng(point2.lat, point2.lng));\r\n      }\r\n\r\n      const rectangle = new google.maps.Rectangle({\r\n        bounds,\r\n        draggable,\r\n      });\r\n\r\n      if (editable) {\r\n        rectangle.setEditable(true);\r\n\r\n        const editManager = viewer.getEditManager();\r\n        const ne          = bounds.getNorthEast();\r\n        const distance    = editManager.getEditableObjectBufferDistance() || 10000;\r\n        const heading     = 135;\r\n        /*\r\n         * Default south-west corner of editable rectangle.\r\n         */\r\n        const sw = google.maps\r\n                         .geometry.spherical\r\n                         .computeOffset(ne, distance, heading);\r\n\r\n        coordinates.push(sw.lat(), sw.lng());\r\n        bounds.extend(sw);\r\n\r\n        google.maps.event.addListener(rectangle, 'bounds_changed', () => {\r\n          const bounds_     = rectangle.getBounds();\r\n          const ne          = bounds_.getNorthEast();\r\n          const sw          = bounds_.getSouthWest();\r\n          const coordinates = [ne.lat(), ne.lng(), sw.lat(), sw.lng()];\r\n\r\n          editManager.setEditableObjectCoordinates(coordinates);\r\n        });\r\n      }\r\n\r\n      if (styleName) {\r\n        const style = mapObjectFactory.createNormalizedShapeStyle(styleName, viewer);\r\n        const { strokeColor, strokeWeight, fillColor, fillOpacity } = style;\r\n\r\n        rectangle.setOptions({\r\n          strokeColor,\r\n          strokeWeight,\r\n          fillColor,\r\n          fillOpacity,\r\n        });\r\n      }\r\n\r\n      return rectangle;\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @param objectModel\r\n     * @param viewer\r\n     */\r\n    createCircle(objectModel, viewer) {\r\n      const { coordinates, options } = objectModel;\r\n      const { draggable, editable, styleName } = options;\r\n      const mapObjectFactory = viewer.getMapObjectFactory();\r\n\r\n      const circle = new google.maps.Circle({\r\n        draggable,\r\n        center: new google.maps.LatLng(coordinates[0], coordinates[1]),\r\n        radius: coordinates[2],\r\n      });\r\n\r\n      if (editable) {\r\n        circle.setEditable(true);\r\n\r\n        const editManager = viewer.getEditManager();\r\n        /*\r\n         * Default radius of editable circle.\r\n         */\r\n        const radius = editManager.getEditableObjectBufferDistance() || 10000;\r\n\r\n        coordinates[2] = radius;\r\n        circle.setRadius(radius);\r\n\r\n        function editingEventListener() {\r\n          const center      = circle.getCenter();\r\n          const radius      = circle.getRadius();\r\n          const coordinates = [center.lat(), center.lng(), radius];\r\n\r\n          editManager.setEditableObjectCoordinates(coordinates);\r\n          editManager.setEditableObjectBufferDistance(radius);\r\n        }\r\n\r\n        google.maps.event.addListener(circle, 'radius_changed', editingEventListener);\r\n        google.maps.event.addListener(circle, 'center_changed', editingEventListener);\r\n      }\r\n\r\n      if (styleName) {\r\n        const style = mapObjectFactory.createNormalizedShapeStyle(styleName, viewer);\r\n        const { strokeColor, strokeWeight, fillColor, fillOpacity } = style;\r\n\r\n        circle.setOptions({\r\n          strokeColor,\r\n          strokeWeight,\r\n          fillColor,\r\n          fillOpacity,\r\n        });\r\n      }\r\n\r\n      return circle;\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @param style\r\n     * @returns {{}}\r\n     */\r\n    normalizeShapeStyle(style) {\r\n      const defaultStyle    = {\r\n        strokeColor  : '#0055aa',\r\n        strokeOpacity: 0.6,\r\n        strokeWeight : 2,\r\n        fillColor    : '#0055aa',\r\n        fillOpacity  : 0.4,\r\n      };\r\n      const normalizedStyle = { ...defaultStyle, ...style };\r\n\r\n      /**\r\n       *\r\n       * @see https://developers.google.com/maps/documentation/javascript/3.exp/reference#IconSequence\r\n       * @see https://developers.google.com/maps/documentation/javascript/3.exp/reference#Symbol\r\n       */\r\n      const { arrows } = normalizedStyle;\r\n\r\n      if (arrows) {\r\n        const defaultIconSequence = {\r\n          icon  : {\r\n            path : google.maps.SymbolPath.FORWARD_CLOSED_ARROW,\r\n            scale: 1.2 * 1.6,\r\n\r\n            //strokeColor  : '#000000',\r\n            //strokeColor  : '#ffffff',\r\n            strokeColor  : '#0055aa',\r\n            strokeOpacity: 0.5,\r\n            strokeWeight : 0.5,\r\n            fillColor    : '#ffffff',\r\n\r\n            //fillColor    : '#000000',\r\n            fillOpacity: 0.75,\r\n          },\r\n          repeat: '5%',\r\n        };\r\n\r\n        const { length, width, fillColor, fillOpacity, frequency } = arrows;\r\n\r\n        const arrowStyle = {\r\n          icon  : {\r\n            fillColor,\r\n            fillOpacity,\r\n            scale: (_.isFinite(length) && _.isFinite(width)) ? (length * width) : undefined,\r\n          },\r\n          repeat: _.isFinite(frequency) ? `${frequency}%` : undefined,\r\n        };\r\n\r\n        normalizedStyle.icons = [_.merge({}, defaultIconSequence, arrowStyle)];\r\n      }\r\n\r\n      return normalizedStyle;\r\n    },\r\n  });\r\n\r\nconst MapObject = stampit.compose(AbstractMapObject, GoogleMapsMapObject);\r\n\r\nexport { MapObject as default, MapObject };\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./js/maps/viewers/googlemaps/map-object.js\n **/","/**\r\n * Created by Glenn on 2015-08-13.\r\n */\r\n\r\nimport maps from 'googlemaps';\r\nimport { RoutingEngine as RoutingEngineInterface } from '../routing-engine';\r\n\r\n/**\r\n *\r\n * @implements {RoutingEngine}\r\n */\r\nconst GoogleMapsRoutingEngine = stampit()\r\n  .init(({ instance }) => {\r\n    const { routingManager, viewer } = instance;\r\n\r\n    /* region private properties */\r\n\r\n    /*\r\n     *\r\n     */\r\n    let placesService;\r\n\r\n    /*\r\n     *\r\n     */\r\n    let routingService;\r\n\r\n    /* endregion private properties */\r\n\r\n    /* region privileged methods */\r\n\r\n    _.assign(instance, {\r\n\r\n      /**\r\n       *\r\n       * @param query\r\n       * @returns {Promise}\r\n       */\r\n      searchPlaces(query) {\r\n        const defer = $.Deferred();\r\n        const { bottom, right, top, left } =  viewer.getBoundingBox();\r\n\r\n        placesService.textSearch({\r\n          query,\r\n          bounds: new google.maps.LatLngBounds(\r\n            new google.maps.LatLng(bottom, right),\r\n            new google.maps.LatLng(top, left)\r\n          ),\r\n        }, (results, status) => {\r\n\r\n          if (status === google.maps.places.PlacesServiceStatus.OK) {\r\n            const places = _.map(results, (item) => {\r\n              const { geometry, name, formatted_address } = item;\r\n              const { location } = geometry;\r\n\r\n              return {\r\n                icon: 'mc-icon-routing-typeaddress',\r\n                lat : location.lat(),\r\n                lng : location.lng(),\r\n                name: `${name}, ${formatted_address}`,\r\n              };\r\n            });\r\n\r\n            defer.resolve(places);\r\n          } else {\r\n            defer.reject({ message: status });\r\n          }\r\n        });\r\n\r\n        return defer.promise();\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @returns {Promise}\r\n       */\r\n      calculateRoute() {\r\n        const defer     = $.Deferred();\r\n        const waypoints = routingManager.getValidWaypoints();\r\n        const start     = waypoints.shift();\r\n        const end       = waypoints.pop();\r\n        const { tollroad, motorway, boatFerry }  = routingManager.getRouteFeatures();\r\n        const request   = {\r\n          avoidTolls   : (tollroad < 0),\r\n          avoidHighways: (motorway < 0),\r\n          avoidFerries : (boatFerry < 0),\r\n          travelMode   : google.maps.TravelMode.DRIVING,\r\n          origin       : new google.maps.LatLng(start.lat, start.lng),\r\n          destination  : new google.maps.LatLng(end.lat, end.lng),\r\n          waypoints    : _.map(waypoints, (waypoint) => ({\r\n            location: new google.maps.LatLng(waypoint.lat, waypoint.lng),\r\n            stopover: true,\r\n          })),\r\n        };\r\n\r\n        routingService.route(request, (response, status) => {\r\n\r\n          if (status === google.maps.DirectionsStatus.OK) {\r\n            const route         = response.routes[0];\r\n            const routingResult = {\r\n              path     : [],\r\n              legs     : [],\r\n              summary  : {},\r\n              maneuvers: [],\r\n            };\r\n            const { path, legs, summary, maneuvers } = routingResult;\r\n\r\n            _.forEach(route.legs, (leg) => {\r\n              const { distance, duration } = leg;\r\n\r\n              legs.push({\r\n                firstPointIndex: path.length,\r\n                length         : distance.value,\r\n                traveltime     : duration.value,\r\n              });\r\n\r\n              _.forEach(leg.steps, (step) => {\r\n                const { instructions, maneuver } = step;\r\n\r\n                maneuvers.push({\r\n                  instruction  : instructions,\r\n                  baseCssAction: 'adp-maneuver',\r\n                  action       : maneuver,\r\n                });\r\n\r\n                _.forEach(step.path, (latLng) => {\r\n                  path.push({\r\n                    lat: parseFloat(latLng.lat().toFixed(8)),\r\n                    lng: parseFloat(latLng.lng().toFixed(8)),\r\n                  });\r\n                });\r\n              });\r\n            });\r\n\r\n            _.assign(summary, _.transform(legs, (result, leg) => {\r\n              const { traveltime, length } = leg;\r\n\r\n              result.duration = result.duration + traveltime;\r\n              result.distance = result.distance + length;\r\n            }), { duration: 0, distance: 0 });\r\n\r\n            defer.resolve(routingResult);\r\n          } else {\r\n            defer.reject({ message: status });\r\n          }\r\n        });\r\n\r\n        return defer.promise();\r\n      },\r\n    });\r\n\r\n    /* endregion privileged methods */\r\n\r\n    /* region init code */\r\n\r\n    placesService = new google.maps.places.PlacesService(viewer.getNativeObject());\r\n\r\n    routingService = new google.maps.DirectionsService();\r\n\r\n    /* endregion init code */\r\n  });\r\n\r\nconst RoutingEngine = stampit.compose(RoutingEngineInterface, GoogleMapsRoutingEngine);\r\n\r\nexport { RoutingEngine as default, RoutingEngine };\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./js/maps/viewers/googlemaps/routing-engine.js\n **/","require(\"!!C:\\\\xampp\\\\htdocs\\\\roam\\\\base\\\\web2\\\\node_modules\\\\script-loader\\\\addScript.js\")(require(\"!!C:\\\\xampp\\\\htdocs\\\\roam\\\\base\\\\web2\\\\node_modules\\\\raw-loader\\\\index.js!C:\\\\xampp\\\\htdocs\\\\roam\\\\base\\\\web2\\\\js\\\\lib\\\\googlemaps\\\\markerclustererplus.min.js\"))\n\n\n/** WEBPACK FOOTER **\n ** ./js/lib/googlemaps/markerclustererplus.min.js\n **/","module.exports = \"function ClusterIcon(cluster,styles){cluster.getMarkerClusterer().extend(ClusterIcon,google.maps.OverlayView),this.cluster_=cluster,this.className_=cluster.getMarkerClusterer().getClusterClass(),this.styles_=styles,this.center_=null,this.div_=null,this.sums_=null,this.visible_=!1,this.setMap(cluster.getMap())}function Cluster(mc){this.markerClusterer_=mc,this.map_=mc.getMap(),this.gridSize_=mc.getGridSize(),this.minClusterSize_=mc.getMinimumClusterSize(),this.averageCenter_=mc.getAverageCenter(),this.hideLabel_=mc.getHideLabel(),this.markers_=[],this.center_=null,this.bounds_=null,this.clusterIcon_=new ClusterIcon(this,mc.getStyles())}function MarkerClusterer(map,opt_markers,opt_options){this.extend(MarkerClusterer,google.maps.OverlayView),opt_markers=opt_markers||[],opt_options=opt_options||{},this.markers_=[],this.clusters_=[],this.listeners_=[],this.activeMap_=null,this.ready_=!1,this.gridSize_=opt_options.gridSize||60,this.minClusterSize_=opt_options.minimumClusterSize||2,this.maxZoom_=opt_options.maxZoom||null,this.styles_=opt_options.styles||[],this.title_=opt_options.title||\\\"\\\",this.zoomOnClick_=!0,void 0!==opt_options.zoomOnClick&&(this.zoomOnClick_=opt_options.zoomOnClick),this.averageCenter_=!1,void 0!==opt_options.averageCenter&&(this.averageCenter_=opt_options.averageCenter),this.ignoreHidden_=!1,void 0!==opt_options.ignoreHidden&&(this.ignoreHidden_=opt_options.ignoreHidden),this.enableRetinaIcons_=!1,void 0!==opt_options.enableRetinaIcons&&(this.enableRetinaIcons_=opt_options.enableRetinaIcons),this.hideLabel_=!1,void 0!==opt_options.hideLabel&&(this.hideLabel_=opt_options.hideLabel),this.imagePath_=opt_options.imagePath||MarkerClusterer.IMAGE_PATH,this.imageExtension_=opt_options.imageExtension||MarkerClusterer.IMAGE_EXTENSION,this.imageSizes_=opt_options.imageSizes||MarkerClusterer.IMAGE_SIZES,this.calculator_=opt_options.calculator||MarkerClusterer.CALCULATOR,this.batchSize_=opt_options.batchSize||MarkerClusterer.BATCH_SIZE,this.batchSizeIE_=opt_options.batchSizeIE||MarkerClusterer.BATCH_SIZE_IE,this.clusterClass_=opt_options.clusterClass||\\\"cluster\\\",-1!==navigator.userAgent.toLowerCase().indexOf(\\\"msie\\\")&&(this.batchSize_=this.batchSizeIE_),this.setupStyles_(),this.addMarkers(opt_markers,!0),this.setMap(map)}ClusterIcon.prototype.onAdd=function(){var cMouseDownInCluster,cDraggingMapByCluster,cClusterIcon=this;this.div_=document.createElement(\\\"div\\\"),this.div_.className=this.className_,this.visible_&&this.show(),this.getPanes().overlayMouseTarget.appendChild(this.div_),this.boundsChangedListener_=google.maps.event.addListener(this.getMap(),\\\"bounds_changed\\\",function(){cDraggingMapByCluster=cMouseDownInCluster}),google.maps.event.addDomListener(this.div_,\\\"mousedown\\\",function(){cMouseDownInCluster=!0,cDraggingMapByCluster=!1}),google.maps.event.addDomListener(this.div_,\\\"click\\\",function(e){if(cMouseDownInCluster=!1,!cDraggingMapByCluster){var theBounds,mz,mc=cClusterIcon.cluster_.getMarkerClusterer();google.maps.event.trigger(mc,\\\"click\\\",cClusterIcon.cluster_),google.maps.event.trigger(mc,\\\"clusterclick\\\",cClusterIcon.cluster_),mc.getZoomOnClick()&&(mz=mc.getMaxZoom(),theBounds=cClusterIcon.cluster_.getBounds(),mc.getMap().fitBounds(theBounds),setTimeout(function(){mc.getMap().fitBounds(theBounds),null!==mz&&mc.getMap().getZoom()>mz&&mc.getMap().setZoom(mz+1)},100)),e.cancelBubble=!0,e.stopPropagation&&e.stopPropagation()}}),google.maps.event.addDomListener(this.div_,\\\"mouseover\\\",function(){var mc=cClusterIcon.cluster_.getMarkerClusterer();google.maps.event.trigger(mc,\\\"mouseover\\\",cClusterIcon.cluster_)}),google.maps.event.addDomListener(this.div_,\\\"mouseout\\\",function(){var mc=cClusterIcon.cluster_.getMarkerClusterer();google.maps.event.trigger(mc,\\\"mouseout\\\",cClusterIcon.cluster_)})},ClusterIcon.prototype.onRemove=function(){this.div_&&this.div_.parentNode&&(this.hide(),google.maps.event.removeListener(this.boundsChangedListener_),google.maps.event.clearInstanceListeners(this.div_),this.div_.parentNode.removeChild(this.div_),this.div_=null)},ClusterIcon.prototype.draw=function(){if(this.visible_){var pos=this.getPosFromLatLng_(this.center_);this.div_.style.top=pos.y+\\\"px\\\",this.div_.style.left=pos.x+\\\"px\\\"}},ClusterIcon.prototype.hide=function(){this.div_&&(this.div_.style.display=\\\"none\\\"),this.visible_=!1},ClusterIcon.prototype.show=function(){if(this.div_){var img=\\\"\\\",bp=this.backgroundPosition_.split(\\\" \\\"),spriteH=parseInt(bp[0].trim(),10),spriteV=parseInt(bp[1].trim(),10),pos=this.getPosFromLatLng_(this.center_);this.div_.style.cssText=this.createCss(pos),img=\\\"<img src='\\\"+this.url_+\\\"' style='position: absolute; top: \\\"+spriteV+\\\"px; left: \\\"+spriteH+\\\"px; \\\",img+=this.cluster_.getMarkerClusterer().enableRetinaIcons_?\\\"width: \\\"+this.width_+\\\"px;height: \\\"+this.height_+\\\"px;\\\":\\\"clip: rect(\\\"+-1*spriteV+\\\"px, \\\"+(-1*spriteH+this.width_)+\\\"px, \\\"+(-1*spriteV+this.height_)+\\\"px, \\\"+-1*spriteH+\\\"px);\\\",img+=\\\"'>\\\",this.div_.innerHTML=img+\\\"<div style='position: absolute;top: \\\"+this.anchorText_[0]+\\\"px;left: \\\"+this.anchorText_[1]+\\\"px;color: \\\"+this.textColor_+\\\";font-size: \\\"+this.textSize_+\\\"px;font-family: \\\"+this.fontFamily_+\\\";font-weight: \\\"+this.fontWeight_+\\\";font-style: \\\"+this.fontStyle_+\\\";text-decoration: \\\"+this.textDecoration_+\\\";text-align: center;width: \\\"+this.width_+\\\"px;line-height:\\\"+this.height_+\\\"px;'>\\\"+(this.cluster_.hideLabel_?\\\" \\\":this.sums_.text)+\\\"</div>\\\",this.div_.title=\\\"undefined\\\"==typeof this.sums_.title||\\\"\\\"===this.sums_.title?this.cluster_.getMarkerClusterer().getTitle():this.sums_.title,this.div_.style.display=\\\"\\\"}this.visible_=!0},ClusterIcon.prototype.useStyle=function(sums){this.sums_=sums;var index=Math.max(0,sums.index-1);index=Math.min(this.styles_.length-1,index);var style=this.styles_[index];this.url_=style.url,this.height_=style.height,this.width_=style.width,this.anchorText_=style.anchorText||[0,0],this.anchorIcon_=style.anchorIcon||[parseInt(this.height_/2,10),parseInt(this.width_/2,10)],this.textColor_=style.textColor||\\\"black\\\",this.textSize_=style.textSize||11,this.textDecoration_=style.textDecoration||\\\"none\\\",this.fontWeight_=style.fontWeight||\\\"bold\\\",this.fontStyle_=style.fontStyle||\\\"normal\\\",this.fontFamily_=style.fontFamily||\\\"Arial,sans-serif\\\",this.backgroundPosition_=style.backgroundPosition||\\\"0 0\\\"},ClusterIcon.prototype.setCenter=function(center){this.center_=center},ClusterIcon.prototype.createCss=function(pos){var style=[];return style.push(\\\"cursor: pointer;\\\"),style.push(\\\"position: absolute; top: \\\"+pos.y+\\\"px; left: \\\"+pos.x+\\\"px;\\\"),style.push(\\\"width: \\\"+this.width_+\\\"px; height: \\\"+this.height_+\\\"px;\\\"),style.join(\\\"\\\")},ClusterIcon.prototype.getPosFromLatLng_=function(latlng){var pos=this.getProjection().fromLatLngToDivPixel(latlng);return pos.x-=this.anchorIcon_[1],pos.y-=this.anchorIcon_[0],pos.x=parseInt(pos.x,10),pos.y=parseInt(pos.y,10),pos},Cluster.prototype.getSize=function(){return this.markers_.length},Cluster.prototype.getMarkers=function(){return this.markers_},Cluster.prototype.getCenter=function(){return this.center_},Cluster.prototype.getMap=function(){return this.map_},Cluster.prototype.getMarkerClusterer=function(){return this.markerClusterer_},Cluster.prototype.getBounds=function(){var i,bounds=new google.maps.LatLngBounds(this.center_,this.center_),markers=this.getMarkers();for(i=0;i<markers.length;i++)bounds.extend(markers[i].getPosition());return bounds},Cluster.prototype.remove=function(){this.clusterIcon_.setMap(null),this.markers_=[],delete this.markers_},Cluster.prototype.addMarker=function(marker){var i,mCount,mz;if(this.isMarkerAlreadyAdded_(marker))return!1;if(this.center_){if(this.averageCenter_){var l=this.markers_.length+1,lat=(this.center_.lat()*(l-1)+marker.getPosition().lat())/l,lng=(this.center_.lng()*(l-1)+marker.getPosition().lng())/l;this.center_=new google.maps.LatLng(lat,lng),this.calculateBounds_()}}else this.center_=marker.getPosition(),this.calculateBounds_();if(marker.isAdded=!0,this.markers_.push(marker),mCount=this.markers_.length,mz=this.markerClusterer_.getMaxZoom(),null!==mz&&this.map_.getZoom()>mz)marker.getMap()!==this.map_&&marker.setMap(this.map_);else if(mCount<this.minClusterSize_)marker.getMap()!==this.map_&&marker.setMap(this.map_);else if(mCount===this.minClusterSize_)for(i=0;mCount>i;i++)this.markers_[i].setMap(null);else marker.setMap(null);return!0},Cluster.prototype.isMarkerInClusterBounds=function(marker){return this.bounds_.contains(marker.getPosition())},Cluster.prototype.calculateBounds_=function(){var bounds=new google.maps.LatLngBounds(this.center_,this.center_);this.bounds_=this.markerClusterer_.getExtendedBounds(bounds)},Cluster.prototype.updateIcon_=function(){var mCount=this.markers_.length,mz=this.markerClusterer_.getMaxZoom();if(null!==mz&&this.map_.getZoom()>mz)return void this.clusterIcon_.hide();if(mCount<this.minClusterSize_)return void this.clusterIcon_.hide();var numStyles=this.markerClusterer_.getStyles().length,sums=this.markerClusterer_.getCalculator()(this.markers_,numStyles);this.clusterIcon_.setCenter(this.center_),this.clusterIcon_.useStyle(sums),this.clusterIcon_.show()},Cluster.prototype.isMarkerAlreadyAdded_=function(marker){for(var i=0,n=this.markers_.length;n>i;i++)if(marker===this.markers_[i])return!0;return!1},MarkerClusterer.prototype.onAdd=function(){var cMarkerClusterer=this;this.activeMap_=this.getMap(),this.ready_=!0,this.repaint(),this.listeners_=[google.maps.event.addListener(this.getMap(),\\\"zoom_changed\\\",function(){cMarkerClusterer.resetViewport_(!1),(this.getZoom()===(this.get(\\\"minZoom\\\")||0)||this.getZoom()===this.get(\\\"maxZoom\\\"))&&google.maps.event.trigger(this,\\\"idle\\\")}),google.maps.event.addListener(this.getMap(),\\\"idle\\\",function(){cMarkerClusterer.redraw_()})]},MarkerClusterer.prototype.onRemove=function(){var i;for(i=0;i<this.markers_.length;i++)this.markers_[i].getMap()!==this.activeMap_&&this.markers_[i].setMap(this.activeMap_);for(i=0;i<this.clusters_.length;i++)this.clusters_[i].remove();for(this.clusters_=[],i=0;i<this.listeners_.length;i++)google.maps.event.removeListener(this.listeners_[i]);this.listeners_=[],this.activeMap_=null,this.ready_=!1},MarkerClusterer.prototype.draw=function(){},MarkerClusterer.prototype.setupStyles_=function(){var i,size;if(!(this.styles_.length>0))for(i=0;i<this.imageSizes_.length;i++)size=this.imageSizes_[i],this.styles_.push({url:this.imagePath_+(i+1)+\\\".\\\"+this.imageExtension_,height:size,width:size})},MarkerClusterer.prototype.fitMapToMarkers=function(){var i,markers=this.getMarkers(),bounds=new google.maps.LatLngBounds;for(i=0;i<markers.length;i++)bounds.extend(markers[i].getPosition());this.getMap().fitBounds(bounds)},MarkerClusterer.prototype.getGridSize=function(){return this.gridSize_},MarkerClusterer.prototype.setGridSize=function(gridSize){this.gridSize_=gridSize},MarkerClusterer.prototype.getMinimumClusterSize=function(){return this.minClusterSize_},MarkerClusterer.prototype.setMinimumClusterSize=function(minimumClusterSize){this.minClusterSize_=minimumClusterSize},MarkerClusterer.prototype.getMaxZoom=function(){return this.maxZoom_},MarkerClusterer.prototype.setMaxZoom=function(maxZoom){this.maxZoom_=maxZoom},MarkerClusterer.prototype.getStyles=function(){return this.styles_},MarkerClusterer.prototype.setStyles=function(styles){this.styles_=styles},MarkerClusterer.prototype.getTitle=function(){return this.title_},MarkerClusterer.prototype.setTitle=function(title){this.title_=title},MarkerClusterer.prototype.getZoomOnClick=function(){return this.zoomOnClick_},MarkerClusterer.prototype.setZoomOnClick=function(zoomOnClick){this.zoomOnClick_=zoomOnClick},MarkerClusterer.prototype.getAverageCenter=function(){return this.averageCenter_},MarkerClusterer.prototype.setAverageCenter=function(averageCenter){this.averageCenter_=averageCenter},MarkerClusterer.prototype.getIgnoreHidden=function(){return this.ignoreHidden_},MarkerClusterer.prototype.setIgnoreHidden=function(ignoreHidden){this.ignoreHidden_=ignoreHidden},MarkerClusterer.prototype.getEnableRetinaIcons=function(){return this.enableRetinaIcons_},MarkerClusterer.prototype.setEnableRetinaIcons=function(enableRetinaIcons){this.enableRetinaIcons_=enableRetinaIcons},MarkerClusterer.prototype.getImageExtension=function(){return this.imageExtension_},MarkerClusterer.prototype.setImageExtension=function(imageExtension){this.imageExtension_=imageExtension},MarkerClusterer.prototype.getImagePath=function(){return this.imagePath_},MarkerClusterer.prototype.setImagePath=function(imagePath){this.imagePath_=imagePath},MarkerClusterer.prototype.getImageSizes=function(){return this.imageSizes_},MarkerClusterer.prototype.setImageSizes=function(imageSizes){this.imageSizes_=imageSizes},MarkerClusterer.prototype.getCalculator=function(){return this.calculator_},MarkerClusterer.prototype.setCalculator=function(calculator){this.calculator_=calculator},MarkerClusterer.prototype.setHideLabel=function(hideLabel){this.hideLabel_=hideLabel},MarkerClusterer.prototype.getHideLabel=function(){return this.hideLabel_},MarkerClusterer.prototype.getBatchSizeIE=function(){return this.batchSizeIE_},MarkerClusterer.prototype.setBatchSizeIE=function(batchSizeIE){this.batchSizeIE_=batchSizeIE},MarkerClusterer.prototype.getClusterClass=function(){return this.clusterClass_},MarkerClusterer.prototype.setClusterClass=function(clusterClass){this.clusterClass_=clusterClass},MarkerClusterer.prototype.getMarkers=function(){return this.markers_},MarkerClusterer.prototype.getTotalMarkers=function(){return this.markers_.length},MarkerClusterer.prototype.getClusters=function(){return this.clusters_},MarkerClusterer.prototype.getTotalClusters=function(){return this.clusters_.length},MarkerClusterer.prototype.addMarker=function(marker,opt_nodraw){this.pushMarkerTo_(marker),opt_nodraw||this.redraw_()},MarkerClusterer.prototype.addMarkers=function(markers,opt_nodraw){var key;for(key in markers)markers.hasOwnProperty(key)&&this.pushMarkerTo_(markers[key]);opt_nodraw||this.redraw_()},MarkerClusterer.prototype.pushMarkerTo_=function(marker){if(marker.getDraggable()){var cMarkerClusterer=this;google.maps.event.addListener(marker,\\\"dragend\\\",function(){cMarkerClusterer.ready_&&(this.isAdded=!1,cMarkerClusterer.repaint())})}marker.isAdded=!1,this.markers_.push(marker)},MarkerClusterer.prototype.removeMarker=function(marker,opt_nodraw,opt_noMapRemove){var removeFromMap=!0&&!opt_noMapRemove,removed=this.removeMarker_(marker,removeFromMap);return!opt_nodraw&&removed&&this.repaint(),removed},MarkerClusterer.prototype.removeMarkers=function(markers,opt_nodraw,opt_noMapRemove){var i,r,removed=!1,removeFromMap=!0&&!opt_noMapRemove;for(i=0;i<markers.length;i++)r=this.removeMarker_(markers[i],removeFromMap),removed=removed||r;return!opt_nodraw&&removed&&this.repaint(),removed},MarkerClusterer.prototype.removeMarker_=function(marker,removeFromMap){var i,index=-1;if(this.markers_.indexOf)index=this.markers_.indexOf(marker);else for(i=0;i<this.markers_.length;i++)if(marker===this.markers_[i]){index=i;break}return-1===index?!1:(removeFromMap&&marker.setMap(null),this.markers_.splice(index,1),!0)},MarkerClusterer.prototype.clearMarkers=function(){this.resetViewport_(!0),this.markers_=[]},MarkerClusterer.prototype.repaint=function(){var oldClusters=this.clusters_.slice();this.clusters_=[],this.resetViewport_(!1),this.redraw_(),setTimeout(function(){var i;for(i=0;i<oldClusters.length;i++)oldClusters[i].remove()},0)},MarkerClusterer.prototype.getExtendedBounds=function(bounds){var projection=this.getProjection(),tr=new google.maps.LatLng(bounds.getNorthEast().lat(),bounds.getNorthEast().lng()),bl=new google.maps.LatLng(bounds.getSouthWest().lat(),bounds.getSouthWest().lng()),trPix=projection.fromLatLngToDivPixel(tr);trPix.x+=this.gridSize_,trPix.y-=this.gridSize_;var blPix=projection.fromLatLngToDivPixel(bl);blPix.x-=this.gridSize_,blPix.y+=this.gridSize_;var ne=projection.fromDivPixelToLatLng(trPix),sw=projection.fromDivPixelToLatLng(blPix);return bounds.extend(ne),bounds.extend(sw),bounds},MarkerClusterer.prototype.redraw_=function(){this.createClusters_(0)},MarkerClusterer.prototype.resetViewport_=function(opt_hide){var i,marker;for(i=0;i<this.clusters_.length;i++)this.clusters_[i].remove();for(this.clusters_=[],i=0;i<this.markers_.length;i++)marker=this.markers_[i],marker.isAdded=!1,opt_hide&&marker.setMap(null)},MarkerClusterer.prototype.distanceBetweenPoints_=function(p1,p2){var R=6371,dLat=(p2.lat()-p1.lat())*Math.PI/180,dLon=(p2.lng()-p1.lng())*Math.PI/180,a=Math.sin(dLat/2)*Math.sin(dLat/2)+Math.cos(p1.lat()*Math.PI/180)*Math.cos(p2.lat()*Math.PI/180)*Math.sin(dLon/2)*Math.sin(dLon/2),c=2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a)),d=R*c;return d},MarkerClusterer.prototype.isMarkerInBounds_=function(marker,bounds){return bounds.contains(marker.getPosition())},MarkerClusterer.prototype.addToClosestCluster_=function(marker){var i,d,cluster,center,distance=4e4,clusterToAddTo=null;for(i=0;i<this.clusters_.length;i++)cluster=this.clusters_[i],center=cluster.getCenter(),center&&(d=this.distanceBetweenPoints_(center,marker.getPosition()),distance>d&&(distance=d,clusterToAddTo=cluster));clusterToAddTo&&clusterToAddTo.isMarkerInClusterBounds(marker)?clusterToAddTo.addMarker(marker):(cluster=new Cluster(this),cluster.addMarker(marker),this.clusters_.push(cluster))},MarkerClusterer.prototype.createClusters_=function(iFirst){var i,marker,mapBounds,cMarkerClusterer=this;if(this.ready_){0===iFirst&&(google.maps.event.trigger(this,\\\"clusteringbegin\\\",this),\\\"undefined\\\"!=typeof this.timerRefStatic&&(clearTimeout(this.timerRefStatic),delete this.timerRefStatic)),mapBounds=this.getMap().getZoom()>3?new google.maps.LatLngBounds(this.getMap().getBounds().getSouthWest(),this.getMap().getBounds().getNorthEast()):new google.maps.LatLngBounds(new google.maps.LatLng(85.02070771743472,-178.48388434375),new google.maps.LatLng(-85.08136444384544,178.00048865625));var bounds=this.getExtendedBounds(mapBounds),iLast=Math.min(iFirst+this.batchSize_,this.markers_.length);for(i=iFirst;iLast>i;i++)marker=this.markers_[i],!marker.isAdded&&this.isMarkerInBounds_(marker,bounds)&&(!this.ignoreHidden_||this.ignoreHidden_&&marker.getVisible())&&this.addToClosestCluster_(marker);if(iLast<this.markers_.length)this.timerRefStatic=setTimeout(function(){cMarkerClusterer.createClusters_(iLast)},0);else for(delete this.timerRefStatic,google.maps.event.trigger(this,\\\"clusteringend\\\",this),i=0;i<this.clusters_.length;i++)this.clusters_[i].updateIcon_()}},MarkerClusterer.prototype.extend=function(obj1,obj2){return function(object){var property;for(property in object.prototype)this.prototype[property]=object.prototype[property];return this}.apply(obj1,[obj2])},MarkerClusterer.CALCULATOR=function(markers,numStyles){for(var index=0,title=\\\"\\\",count=markers.length.toString(),dv=count;0!==dv;)dv=parseInt(dv/10,10),index++;return index=Math.min(index,numStyles),{text:count,index:index,title:title}},MarkerClusterer.BATCH_SIZE=2e3,MarkerClusterer.BATCH_SIZE_IE=500,MarkerClusterer.IMAGE_PATH=\\\"//cdn.rawgit.com/mahnunchik/markerclustererplus/master/images/m\\\",MarkerClusterer.IMAGE_EXTENSION=\\\"png\\\",MarkerClusterer.IMAGE_SIZES=[53,56,66,78,90],\\\"function\\\"!=typeof String.prototype.trim&&(String.prototype.trim=function(){return this.replace(/^\\\\s+|\\\\s+$/g,\\\"\\\")});\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/raw-loader!./js/lib/googlemaps/markerclustererplus.min.js\n ** module id = 242\n ** module chunks = 2\n **/","module.exports = MarkerClusterer;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"MarkerClusterer\"\n ** module id = 256\n ** module chunks = 2\n **/"],"sourceRoot":""}